{"version":3,"sources":["global/appConfig.js","global/dialogService.js","global/components/Dialog.js","global/authService.js","main/components/NavHeader.js","main/App.js","main/Welcome.js","main/components/LoginForm.js","main/Login.js","main/states.js","main/Home.js","global/requiresAuth.hook.js","router.config.js","index.js"],"names":["instance","this","sort","emailAddress","undefined","restDelay","load","Object","assign","JSON","parse","sessionStorage","getItem","Error","console","log","setItem","stringify","confirm","message","details","confirmMsg","denyMsg","component","Promise","reject","promise","resolve","update","__registerDialogComponent","Dialog","props","info","onConfirm","onDeny","setState","hidden","setTimeout","active","close","confirmed","state","DialogService","dialog","className","style","paddingTop","onClick","Component","usernames","AppConfig","username","password","validUsername","indexOf","validPassword","then","authenticatedUser","save","NavHeader","handleLogout","onLogout","isAuthenticated","AuthService","navbar","class","to","role","marginRight","margin","App","transition","logout","router","stateService","go","reload","Welcome","LoginForm","handleSubmit","onSubmit","handleChangeUsername","event","onChangeValues","target","value","handleChangePassword","usernameOptions","error","loading","htmlFor","name","id","onChange","disabled","map","option","key","display","position","bottom","marginLeft","height","type","React","Login","handleChangeCredentials","credentials","handleLogin","returnTo","authenticating","authenticate","params","catch","errorMessage","redirectTo","parent","url","token","deps","resolveFn","$transition$","redirectedFrom","targetState","$state","from","lazyLoad","hook","criteria","data","requiresAuth","callback","location","UIRouterReact","plugin","servicesPlugin","hashLocationPlugin","module","Visualizer","appStates","forEach","stateRegistry","register","urlService","rules","initial","transitionService","onBefore","reqAuthHook","priority","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89e44c83.chunk.js","sourcesContent":["/**\n* This service stores and retrieves user preferences in session storage\n*/\nclass AppConfig {\n  constructor() {\n    this.sort = '+date';\n    this.emailAddress = undefined;\n    this.restDelay = 100;\n    this.load();\n  }\n\n  load () {\n    try {\n      Object.assign(this, {\n        ...JSON.parse(sessionStorage.getItem('appConfig'))\n      });\n    } catch (Error) { console.log(); }\n  }\n\n  save () {\n    sessionStorage.setItem('appConfig', JSON.stringify({ ...this }));\n  }\n}\n\nlet instance = new AppConfig();\nexport default instance;\n","class DialogService {\n  constructor () {\n    this.component = undefined;\n  }\n\n  confirm = (message, details = \"Are you sure?\", confirmMsg = \"Yes\", denyMsg = \"No\") => {\n    if (typeof this.component === 'undefined') return Promise.reject(false);\n    let promise = new Promise((resolve, reject) => {\n      this.component.update(\n        { message, details, confirmMsg, denyMsg },\n        resolve, reject\n      );\n    });\n    return promise;\n  }\n\n  __registerDialogComponent = (component) => {\n    this.component = component;\n  }\n}\n\nlet instance = new DialogService();\nexport default instance;","import React, {Component} from 'react';\nimport DialogService from '../dialogService.js';\n\nclass Dialog extends Component {\n  constructor (props) {\n    super(props);\n    DialogService.__registerDialogComponent(this);\n    this.state = {\n      active: false,\n      message: '',\n      details: '',\n      confirmMsg: '',\n      denyMsg: '',\n      onConfirm: () => {},\n      onDeny: () => {},\n      hidden: true\n    }\n  }\n  update = (info, onConfirm, onDeny) => {\n    this.setState({ ...info, onConfirm, onDeny, hidden: false });\n    setTimeout(() => this.setState({active:true}));\n  }\n  close = (confirmed) => {\n    const { onConfirm, onDeny } = this.state;\n    return () => {\n      this.setState({ hidden: true, active: false });\n      if (confirmed) onConfirm(true);\n      else onDeny(false);\n    }\n  }\n  render () {\n    let { active, hidden, message, details, confirmMsg, denyMsg, onConfirm, onDeny } = this.state;\n    let dialog = (\n      <div className={'dialog ' + (active ? 'active' : '')}>\n        <div className=\"backdrop\" />\n        <div className='wrapper'>\n          <div className=\"content\">\n            {message ? <h4>{message}</h4> : null}\n            {details ? <div>{details}</div> : null}\n\n            <div style={{paddingTop: '1em'}}>\n            <button className=\"btn btn-primary\" onClick={this.close(true)}>{confirmMsg}</button>\n            <button className=\"btn btn-primary\" onClick={this.close(false)}>{denyMsg}</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n    return hidden ? null : dialog;\n  }\n}\n\nexport default Dialog;\n","import AppConfig from './appConfig';\n/**\n * This service emulates an Authentication Service.\n */\nclass AuthService {\n  constructor() {\n    this.usernames = ['myself@angular.dev', 'devgal@angular.dev', 'devguy@angular.dev'];\n  }\n\n  isAuthenticated () {\n    return !!AppConfig.emailAddress;\n  }\n\n  /**\n  * Fake authentication function that returns a promise that is either resolved or rejected.\n  *\n  * Given a username and password, checks that the username matches one of the known\n  * usernames (this.usernames), and that the password matches 'password'.\n  *\n  * Delays 800ms to simulate an async REST API delay.\n  */\n  authenticate (username, password) {\n    // checks if the username is one of the known usernames, and the password is 'password'\n    const checkCredentials = () => new Promise((resolve, reject) => {\n      var validUsername = this.usernames.indexOf(username) !== -1;\n      var validPassword = password === 'password';\n      setTimeout(() => {\n        if (validUsername && validPassword) resolve(username)\n        else reject(\"Invalid username or password\");\n      }, 800);\n    });\n\n    return checkCredentials()\n      .then((authenticatedUser) => {\n        AppConfig.emailAddress = authenticatedUser;\n        AppConfig.save();\n      });\n  }\n\n  /** Logs the current user out */\n  logout () {\n    AppConfig.emailAddress = undefined;\n    AppConfig.save();\n  }\n}\n\nlet instance = new AuthService();\nexport default instance;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n\nimport AppConfig from '../../global/appConfig';\nimport AuthService from '../../global/authService';\n\nclass NavHeader extends Component {\n  static propTypes = {\n    onLogout: PropTypes.func\n  }\n  handleLogout = () => {\n    this.props.onLogout();\n  }\n\n  render () {\n    let isAuthenticated = AuthService.isAuthenticated();\n    let emailAddress = AppConfig.emailAddress;\n\n    let navbar = (\n      <ul className=\"nav nav-tabs\">\n        <UISrefActive class={'active'}><UISref to={'mymessages'}><li><a role=\"button\">Messages</a></li></UISref></UISrefActive>\n        <UISrefActive class={'active'}><UISref to={'contacts'}><li><a role=\"button\">Contacts</a></li></UISref></UISrefActive>\n        <UISrefActive class={'active'}><UISref to={'prefs'}><li><a role=\"button\">Preferences</a></li></UISref></UISrefActive>\n\n        <li className=\"navbar-right\">\n          <UISref to={'home'}><button style={{marginRight: 5}}className=\"btn btn-primary fa fa-home\"></button></UISref>\n          <UISref to={'mymessages.compose'}><button style={{marginRight: 15}} className=\"btn btn-primary\"><i className=\"fa fa-envelope\"></i> New Message</button></UISref>\n        </li>\n\n        <li className=\"navbar-text navbar-right logged-in-user\" style={{margin: '0.5em 1.5em'}}>\n          <div>\n            {emailAddress} <i className=\"fa fa-chevron-down\"></i>\n            <div className=\"hoverdrop\">\n              <button className=\"btn btn-primary\" onClick={this.handleLogout}>Log Out</button>\n            </div>\n          </div>\n        </li>\n      </ul>\n    );\n\n    return isAuthenticated\n      ? navbar\n      : <span/>;\n  }\n}\n\nexport default NavHeader;\n","import React, { Component } from 'react';\nimport { UIView } from '@uirouter/react';\n\nimport AuthService from '../global/authService';\nimport NavHeader from './components/NavHeader';\n\n/**\n * This is the main app component for an authenticated user.\n *\n * This component renders the outermost chrome (application header and tabs, the compose  and logout button)\n * It has a `UIView` viewport for nested states to fill in.\n */\nclass App extends Component {\n  constructor (props) {\n    super(props);\n  }\n\n  handleLogout = () => {\n    let {transition} = this.props;\n    AuthService.logout();\n    transition.router.stateService.go('welcome', {}, { reload: true });\n  }\n\n  render () {\n    return (\n      <div>\n        <div className=\"navheader\">\n          <NavHeader onLogout={this.handleLogout}/>\n        </div>\n        <UIView/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport {UISref} from '@uirouter/react';\n\nclass Welcome extends Component {\n  render () {\n    return (\n      <div className=\"container-fluid\">\n        <h3>UI-Router Sample App</h3>\n        <p>Welcome to the sample app!</p>\n        <p>This is a demonstration app intended to highlight some patterns that can be used within UI-Router.\n          These patterns should help you to to build cohesive, robust apps.  Additionally, this app uses state-vis\n          to show the tree of states, and a transition log visualizer.</p>\n        <h4>App Overview</h4>\n        <p>First, start exploring the application's functionality at a high level by activating\n          one of the three submodules: Messages, Contacts, or Preferences. If you are not already logged in,\n          you will be taken to an authentication screen (the authentication is fake; the password is \"password\")\n        </p>\n        <div>\n          <UISref to={'mymessages'}><button className=\"btn btn-primary\"><i className=\"fa fa-envelope\"></i><span>Messages</span></button></UISref>\n          <UISref to={'contacts'}><button className=\"btn btn-primary\"><i className=\"fa fa-users\"></i><span>Contacts</span></button></UISref>\n          <UISref to={'prefs'}><button className=\"btn btn-primary\"><i className=\"fa fa-cogs\"></i><span>Preferences</span></button></UISref>\n        </div>\n        <h4>Patterns and Recipes</h4>\n        <ul>\n          <li>Require Authentication</li>\n          <li>Previous State</li>\n          <li>Redirect Hook</li>\n          <li>Default Param Values</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Welcome;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass LoginForm extends React.Component {\n  static propTypes = {\n    username: PropTypes.string,\n    usernameOptions: PropTypes.arrayOf(PropTypes.string),\n    password: PropTypes.string,\n    error: PropTypes.string,\n    loading: PropTypes.bool,\n    onChangeValues: PropTypes.func,\n    onSubmit: PropTypes.func\n  }\n  handleSubmit = () => {\n    let {username, password} = this.props;\n    this.props.onSubmit({username, password});\n  }\n  handleChangeUsername = (event) => {\n    this.props.onChangeValues({username:event.target.value, password: this.props.password});\n  }\n  handleChangePassword = (event) => {\n    this.props.onChangeValues({username:this.props.username, password: event.target.value});\n  }\n  render() {\n    let { username, usernameOptions, password, error, loading } = this.props;\n    return (\n      <div className=\"login-form\">\n        <div>\n          <label htmlFor=\"username\">Username:</label>\n          <select className=\"form-control\"\n            name=\"username\"\n            id=\"username\"\n            value={username}\n            onChange={this.handleChangeUsername}>\n            <option value=\"\" disabled></option>\n            {usernameOptions.map(option => <option key={option} value={option}>{option}</option>)}\n          </select>\n          {!username ? <i style={{display: 'block', position: 'relative', bottom: '1.8em', marginLeft: '10em', height: 0}} className=\"fa fa-arrow-left bounce-horizontal\"> Choose </i> : null}\n        </div>\n        <br/>\n        <div>\n          <label htmlFor=\"password\">Password:</label>\n          <input className=\"form-control\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={this.handleChangePassword}/>\n          {username && password !== 'password' ? <i style={{position: 'relative', bottom: '1.8em', marginLeft: '5em', height: 0}} className=\"fa fa-arrow-left bounce-horizontal\">Enter '<b>password</b>' here</i> : null}\n        </div>\n        {error ? <div className=\"well error\">{error}</div> : null}\n        <hr/>\n        <div>\n          <button className=\"btn btn-primary\"\n            type=\"button\"\n            disabled={loading}\n            onClick={this.handleSubmit}>\n            {loading ? <i className=\"fa fa-spin fa-spinner\"></i> : null} <span>Log in</span>\n          </button>\n          {username && password === 'password' ? <i style={{position: 'relative'}} className=\"fa fa-arrow-left bounce-horizontal\"> Click Me!</i> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n\n/*\n<div>\n<label for=\"password\">Password:</label>\n<input class=\"form-control\" type=\"password\" name=\"password\" ng-model=\"$ctrl.credentials.password\">\n<i style=\"position: relative; bottom: 1.8em; margin-left: 5em; height: 0\"\nng-hide=\"!$ctrl.credentials.username || $ctrl.credentials.password == 'password'\" class=\"fa fa-arrow-left bounce-horizontal\">\nEnter '<b>password</b>' here\n</i>\n</div>\n\n<div ng-show=\"$ctrl.errorMessage\" class=\"well error\">{{ $ctrl.errorMessage }}</div>\n\n<hr>\n<div>\n<button class=\"btn btn-primary\" type=\"button\"\nng-disabled=\"$ctrl.authenticating\" ng-click=\"$ctrl.login($ctrl.credentials)\">\n<i class=\"fa fa-spin fa-spinner\" ng-show=\"$ctrl.authenticating\"></i> <span>Log in</span>\n</button>\n<i ng-show=\"$ctrl.credentials.username && $ctrl.credentials.password == 'password'\" style=\"position: relative;\" class=\"fa fa-arrow-left bounce-horizontal\"> Click Me!</i>\n</div>\n*/\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthService from '../global/authService';\nimport AppConfig from '../global/appConfig';\n\nimport LoginForm from './components/LoginForm';\n/**\n * This component renders a faux authentication UI\n *\n * It prompts for the username/password (and gives hints with bouncy arrows)\n * It shows errors if the authentication failed for any reason.\n *\n * The `login` method validates the credentials.\n * Then it sends the user back to the `returnTo` state, which is provided as a resolve data.\n */\nclass Login extends Component {\n  static propTypes = {\n    returnTo: PropTypes.object,\n  }\n\n  constructor (props) {\n    super(props);\n    this.usernames = AuthService.usernames;\n    this.state = {\n      username: AppConfig.emailAddress || '',\n      password: 'password',\n      authenticating: false,\n      errorMessage: ''\n    }\n  }\n  handleChangeCredentials = (credentials) => {\n    this.setState(credentials);\n  }\n  handleLogin = (credentials) => {\n    let {transition, returnTo} = this.props;\n    const done = () => this.setState({authenticating:false});\n    const showError = (errorMessage) => this.setState({errorMessage});\n    const returnToOriginalState = () => transition.router.stateService.go(returnTo.state(), returnTo.params(), { reload: true });\n\n    this.setState({authenticating:true});\n    AuthService.authenticate(credentials.username, credentials.password)\n      .then(returnToOriginalState)\n      .catch((error) => {\n        done();\n        showError(error);\n      });\n  }\n  render () {\n    let {errorMessage, authenticating, username, password} = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2\">\n          <h3>Log In</h3>\n          <p>(This login screen is for demonstration only... just pick a username, enter 'password' and click <b>\"Log in\"</b>)</p>\n          <hr/>\n          <LoginForm\n            usernameOptions={this.usernames}\n            username={username}\n            password={password}\n            error={errorMessage}\n            loading={authenticating}\n            onChangeValues={this.handleChangeCredentials}\n            onSubmit={this.handleLogin}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import App from '../main/App';\nimport Welcome from '../main/Welcome';\nimport Login from '../main/Login';\nimport Home from '../main/Home';\n\n/**\n * This is the parent state for the entire application.\n *\n * This state's primary purposes are:\n * 1) Shows the outermost chrome (including the navigation and logout for authenticated users)\n * 2) Provide a viewport (ui-view) for a substate to plug into\n */\nconst appState = {\n  name: 'app',\n  redirectTo: 'welcome',\n  component: App\n};\n\n/**\n * This is the 'welcome' state.  It is the default state (as defined by app.js) if no other state\n * can be matched to the URL.\n */\nconst welcomeState = {\n  parent: 'app',\n  name: 'welcome',\n  url: '/welcome',\n  component: Welcome\n};\n\n/**\n * This is a home screen for authenticated users.\n *\n * It shows giant buttons which activate their respective submodules: Messages, Contacts, Preferences\n */\nconst homeState = {\n  parent: 'app',\n  name: 'home',\n  url: '/home',\n  component: Home\n};\n\n\n/**\n * This is the login state.  It is activated when the user navigates to /login, or if a unauthenticated\n * user attempts to access a protected state (or substate) which requires authentication. (see routerhooks/requiresAuth.js)\n *\n * It shows a fake login dialog and prompts the user to authenticate.  Once the user authenticates, it then\n * reactivates the state that the user originally came from.\n */\nconst loginState = {\n  parent: 'app',\n  name: 'login',\n  url: '/login',\n  component: Login,\n  resolve: [\n    {\n      token: 'returnTo',\n      deps: [ '$transition$' ],\n      resolveFn: returnTo,\n    },\n  ]\n};\n\n/**\n * A resolve function for 'login' state which figures out what state to return to, after a successful login.\n *\n * If the user was initially redirected to login state (due to the requiresAuth redirect), then return the toState/params\n * they were redirected from.  Otherwise, if they transitioned directly, return the fromState/params.  Otherwise\n * return the main \"app\" state.\n */\nfunction returnTo ($transition$) {\n  if ($transition$.redirectedFrom()) {\n    // The user was redirected to the login state (e.g., via the requiresAuth hook when trying to activate contacts)\n    // Return to the original attempted target state (e.g., contacts)\n    return $transition$.redirectedFrom().targetState();\n  }\n\n  let $state = $transition$.router.stateService;\n\n  // The user was not redirected to the login state; they directly activated the login state somehow.\n  // Return them to the state they came from.\n  if ($transition$.from().name !== '') {\n    return $state.target($transition$.from(), $transition$.params(\"from\"));\n  }\n\n  // If the fromState's name is empty, then this was the initial transition. Just return them to the home state\n  return $state.target('home');\n}\n\n// Future State (Placeholder) for the contacts module\nexport const contactsFutureState = {\n  parent: 'app',\n  name: 'contacts.**',\n  url: '/contacts',\n  lazyLoad: () => import('../contacts/states'),\n};\n\n// Future State (Placeholder) for the prefs module\nexport const prefsFutureState = {\n  parent: 'app',\n  name: 'prefs.**',\n  url: '/prefs',\n  lazyLoad: () => import('../prefs/states'),\n};\n\n// Future State (Placeholder) for the mymessages module\nexport const mymessagesFutureState = {\n  parent: 'app',\n  name: 'mymessages.**',\n  url: '/mymessages',\n  lazyLoad: () => import('../mymessages/states'),\n};\n\n\nexport default [appState, welcomeState, homeState, loginState, contactsFutureState, prefsFutureState, mymessagesFutureState];\n","import React, {Component} from 'react';\nimport {UISref} from '@uirouter/react';\n\n// This is a home component for authenticated users.\n// It shows giant buttons which activate their respective pages: Messages, Contacts, Preferences\nclass Home extends Component {\n  render () {\n    return (\n      <div>\n      <div className=\"home buttons\">\n        <UISref to={'mymessages'}>\n          <button className=\"btn btn-primary\">\n            <h1><i className=\"fa fa-envelope\"/></h1>\n            <h1>Messages</h1>\n          </button>\n        </UISref>\n\n        <UISref to={'contacts'}>\n          <button className=\"btn btn-primary\">\n            <h1><i className=\"fa fa-users\"/></h1>\n            <h1>Contacts</h1>\n          </button>\n        </UISref>\n\n        <UISref to={'prefs'}>\n          <button className=\"btn btn-primary\">\n            <h1><i className=\"fa fa-cogs\"/></h1>\n            <h1>Preferences</h1>\n          </button>\n        </UISref>\n      </div>\n       </div>\n    );\n  }\n}\n\nexport default Home;\n","import AuthService from './authService';\n/**\n * This file contains a Transition Hook which protects a\n * route that requires authentication.\n *\n * This hook redirects to /login when both:\n * - The user is not authenticated\n * - The user is navigating to a state that requires authentication\n */\n\nconst hook = {\n  // Matches if the destination state's data property has a truthy 'requiresAuth' property\n  criteria: {\n    to: (state) => state.data && state.data.requiresAuth\n  },\n  // Function that returns a redirect for the current transition to the login state\n  // if the user is not currently authenticated (according to the AuthService)\n  callback: (transition) => {\n    let $state = transition.router.stateService;\n    if (!AuthService.isAuthenticated()) {\n      return $state.target('login', undefined, { location: false });\n    }\n  }\n}\n\nexport default hook;","import {UIRouterReact, servicesPlugin, hashLocationPlugin} from '@uirouter/react';\n\nimport appStates from './main/states';\n\nimport reqAuthHook from './global/requiresAuth.hook';\n\n// Create a new instance of the Router\nexport const router = new UIRouterReact();\nrouter.plugin(servicesPlugin);\nrouter.plugin(hashLocationPlugin);\n\n// Lazy load visualizer\nimport('@uirouter/visualizer').then(module => router.plugin(module.Visualizer));\n\n// Register the initial (eagerly loaded) states\nappStates.forEach(state => router.stateRegistry.register(state));\n\n// Global config for router\nrouter.urlService.rules.initial({ state: 'welcome' });\n\n// Register the \"requires auth\" hook with the TransitionsService\nrouter.transitionService.onBefore(reqAuthHook.criteria, reqAuthHook.callback, {priority: 10});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { UIRouter, UIView } from '@uirouter/react';\nimport Dialog from './global/components/Dialog';\n\n// polyfill fetch func\nimport 'whatwg-fetch';\n\n// import styles\nimport './styles/index.css';\n\n// import routing\nimport {router} from './router.config';\n\nReactDOM.render(\n  <UIRouter router={router}>\n    <div>\n      <UIView/>\n      <Dialog/>\n    </div>\n  </UIRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}