{"version":3,"sources":["webpack:///./src/contacts/states.js","webpack:///./src/global/dataSources.js","webpack:///./src/util/sessionStorage.js","webpack:///./src/util/util.js","webpack:///./src/contacts/Contacts.js","webpack:///./src/contacts/components/ContactList.js","webpack:///./src/contacts/ContactView.js","webpack:///./src/contacts/components/ContactDetail.js","webpack:///./src/contacts/EditContact.js","webpack:///./src/contacts/components/ContactForm.js"],"names":["contactsState","parent","name","url","resolve","token","resolveFn","ContactsStorage","all","data","requiresAuth","component","Contacts","viewContactState","deps","$transition$","get","params","contactId","ContactView","editContactState","views","EditContact","newContactState","states","SessionStorage","Folders","Messages","folder","searchObject","_id","indexOf","AppConfig","emailAddress","this","search","FoldersStorage","MessagesStorage","sessionStorageKey","sourceUrl","fromSession","sessionStorage","getItem","_data","undefined","_idProp","_eqFn","l","r","JSON","parse","e","console","log","stripHashKey","obj","setProp","Promise","fetch","then","resp","json","_commit","array","map","setItem","stringify","thenFn","reject","setTimeout","restDelay","exampleItem","matchesExample","example","item","Object","keys","reduce","memo","key","items","filter","bind","id","find","save","put","post","guid","pushToArr","eqFn","idx","findIndex","Error","remove","splice","val","push","guidChar","uniqReduce","arr","flattenReduce","concat","c","Math","floor","random","toString","toUpperCase","split","join","props","contacts","className","UIView","style","margin","Component","propTypes","PropTypes","arrayOf","object","ContactList","newContact","UISref","to","contact","index","UISrefActive","class","href","first","last","composeButton","message","email","editContactButton","ContactDetail","company","age","phone","address","street","city","state","zip","src","picture","uiCanExit","trans","canExit","isEqual","DialogService","confirm","handleChangeContact","setState","stateService","transition","router","go","reload","cloneDeep","onContactChange","onClick","formInputs","label","path","ContactForm","handleChangeFor","event","set","target","value","inputs","input","type","onChange","func"],"mappings":"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","file":"3.bundle.js","sourcesContent":["import {ContactsStorage} from '../global/dataSources';\n\nimport Contacts from './Contacts';\nimport ContactView from './ContactView';\nimport EditContact from './EditContact';\n\n/**\n* This state displays the contact list.\n* It also provides a nested ui-view (viewport) for child states to fill in.\n*\n* The contacts are fetched using a resolve.\n*/\nconst contactsState = {\n  parent: 'app', // declares that 'contacts' is a child of 'app'\n  name: \"contacts\",\n  url: \"/contacts\",\n  resolve: [\n    // Resolve all the contacts. The resolved contacts are injected as props into the Contacts component.\n    {\n      token: 'contacts',\n      resolveFn: () => ContactsStorage.all(),\n    }\n  ],\n  data: { requiresAuth: true },\n  component: Contacts\n};\n\n/**\n* This state displays a single contact.\n* The contact to display is fetched using a resolve, based on the `contactId` parameter.\n*/\nconst viewContactState = {\n  name: 'contacts.contact',\n  url: '/:contactId',\n  resolve: [\n    // Resolve the contact, based on the contactId parameter value.\n    // The resolved contact is provided to the contactComponent's contact binding\n    {\n      token: 'contact',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => ContactsStorage.get($transition$.params().contactId),\n    }\n  ],\n  component: ContactView\n};\n\n/**\n* This state allows a user to edit a contact\n*\n* The contact data to edit is injected from the parent state's resolve.\n*\n* This state uses view targeting to replace the parent ui-view (which would normally be filled\n* by 'contacts.contact') with the edit contact template/controller\n*/\nconst editContactState = {\n  name: 'contacts.contact.edit',\n  url: '/edit',\n  views: {\n    // Relatively target the grand-parent-state's $default (unnamed) ui-view\n    // This could also have been written using ui-view@state addressing: $default@contacts\n    // Or, this could also have been written using absolute ui-view addressing: !$default.$default.$default\n    '^.^.$default': {\n      //bindings: { pristineContact: \"contact\" },\n      component: EditContact\n    }\n  }\n};\n\n/**\n* This state allows a user to create a new contact\n*\n* The contact data to edit is injected into the component from the parent state's resolve.\n*/\nconst newContactState = {\n  name: 'contacts.new',\n  url: '/new',\n  component: EditContact\n};\n\nexport const states = [contactsState, viewContactState, editContactState, newContactState];\n","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView} from '@uirouter/react';\n\nimport ContactList from './components/ContactList';\n/**\n * This component renders the contacts page.\n *\n * On the left is the list of contacts.\n * On the right is the ui-view viewport where contact details appear.\n */\nclass Contacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n  }\n\n  constructor (props) {\n    super(props);\n  }\n\n  render () {\n    let {contacts} = this.props;\n    return (\n      <div className=\"my-contacts flex-h\">\n        <ContactList contacts={contacts} className=\"flex nogrow\" />\n        <UIView><h4 style={{margin: '1em 2em'}}>Select a contact</h4></UIView>\n      </div>\n    );\n  }\n}\n\nexport default Contacts;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n/**\n * This component renders a list of contacts.\n *\n * At the top is a \"new contact\" button.\n * Each list item is a clickable link to the `contacts.contact` details substate\n */\nclass ContactList extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object)\n  }\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    // This link is a relative ui-sref to the contacts.new state.\n    let newContact = (\n      <UISref to={'.new'}>\n        <a><button className=\"btn btn-primary\"><i className=\"fa fa-pencil\"></i><span>New Contact</span></button></a>\n      </UISref>\n    );\n    // When the current state matches the ui-sref's state (and its parameters)\n    // UISrefActive applies the 'selected' class to the li element\n    let contacts = this.props.contacts.map((contact, index) =>\n      <li key={index}>\n        <UISrefActive class=\"selected\">\n          <UISref to={'.contact'} params={{contactId:contact._id}}><a href=\"asd\">{contact.name.first + ' ' + contact.name.last}</a></UISref>\n        </UISrefActive>\n      </li>\n    );\n    return (\n      <div className={this.props.className}>\n        <ul className=\"selectlist list-unstyled flex nogrow\">\n          <li>{newContact}</li>\n          <li>&nbsp;</li>\n          {contacts}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ContactList;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref} from '@uirouter/react';\n\nimport ContactDetail from './components/ContactDetail';\n/**\n* This component renders details for a single contact\n*\n* A button messages the contact by linking to `mymessages.compose` state passing the email as a state parameter.\n* Another button edits the contact by linking to `contacts.contact.edit` state.\n*/\n\nclass ContactView extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n  }\n\n  render () {\n    let {contact} = this.props;\n\n    // This button has an ui-sref to the mymessages.compose state. The ui-sref provides the mymessages.compose\n    // state with an non-url parameter, which is used as the initial message model\n    let composeButton = (\n      <UISref to={'mymessages.compose'} params={{message: {to: contact.email}}}>\n        <button className=\"btn btn-primary\">\n          <i className=\"fa fa-envelope\" /><span>Message</span>\n        </button>\n      </UISref>\n    );\n\n    // This button has a relative ui-sref to the contacts.contact.edit state\n    let editContactButton = (\n      <UISref to={'.edit'}>\n        <button className=\"btn btn-primary\">\n          <i className=\"fa fa-pencil\" /><span>Edit Contact</span>\n        </button>\n      </UISref>\n    );\n\n    return (\n      <div className=\"contact\">\n        <ContactDetail contact={contact} />\n        {composeButton}\n        {' '}\n        {editContactButton}\n      </div>\n    );\n  }\n}\n\nexport default ContactView;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * This component renders a read only view of the details for a single contact.\n */\nclass ContactDetail extends Component {\n  static propTypes = {\n    contact: PropTypes.object\n  }\n  render () {\n    let {contact} = this.props;\n    return (\n      <div className=\"flex-h\">\n        <div className=\"details\">\n          <h3>{contact.name.first + ' ' + contact.name.last}</h3>\n          <div><label>Company</label><div>{contact.company}</div></div>\n          <div><label>Age</label><div>{contact.age}</div></div>\n          <div><label>Phone</label><div>{contact.phone}</div></div>\n          <div><label>Email</label><div>{contact.email}</div></div>\n          <div className=\"flex-h\">\n            <label>Address</label>\n            <div>{contact.address.street}<br />\n              {contact.address.city + ', ' + contact.address.state + ' ' + contact.address.zip}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex nogrow\">\n          <img src={contact.picture}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactDetail;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref} from '@uirouter/react';\nimport {isEqual, cloneDeep} from 'lodash';\n\nimport ContactForm from './components/ContactForm';\nimport {ContactsStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n/**\n* The EditContact component\n*\n* This component is used by both `contacts.contact.edit` and `contacts.new` states.\n*\n* The component makes a copy of the contact data for editing by assigning it to the component state.\n* The new copy and original (pristine) copy are used to determine if the contact is \"dirty\" or not.\n* If the user navigates to some other state while the contact is \"dirty\", the `uiCanExit` component\n* hook asks the user to confirm navigation away, losing any edits.\n*\n* The Delete Contact button is wired to the `remove` method, which:\n* - asks for confirmation from the user\n* - deletes the resource from REST API\n* - navigates back to the contacts grandparent state using relative addressing `^.^`\n*   the `reload: true` option re-fetches the contacts list from the server\n*\n* The Save Contact button is wired to the `save` method which:\n* - saves the REST resource (PUT or POST, depending)\n* - navigates back to the parent state using relative addressing `^`.\n*   when editing an existing contact, this returns to the `contacts.contact` \"view contact\" state\n*   when creating a new contact, this returns to the `contacts` list.\n*   the `reload: true` option re-fetches the contacts resolve data from the server\n*/\nclass EditContact extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n  }\n\n  constructor (props) {\n    super(props);\n    this.canExit = false;\n    this.state = {\n      contact: cloneDeep(this.props.contact)\n    }\n  }\n\n  uiCanExit = (trans) => {\n    if (this.canExit || isEqual(this.state.contact, this.props.contact)) return true;\n\n    let message = 'You have unsaved changes to this contact.';\n    let question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question);\n  }\n\n  handleChangeContact = (contact) => {\n    this.setState({ contact });\n  }\n\n  save = () => {\n    // Save the contact, then go to the parent state (either 'contacts' or 'contacts.contact')\n    const {stateService} = this.props.transition.router;\n    ContactsStorage.save(this.state.contact)\n      .then(() => this.canExit = true)\n      .then(() => stateService.go('^', null, { reload: true }));\n  }\n\n  remove = () => {\n    // Ask for confirmation, then delete the contact, then go to the grandparent state ('contacts')\n    let {contact} = this.state;\n    const {stateService} = this.props.transition.router;\n    DialogService.confirm(`Delete contact: ${contact.name.first} ${contact.name.last}`)\n      .then(() => ContactsStorage.remove(contact))\n      .then(() => this.canExit = true)\n      .then(() => stateService.go(\"^.^\", null, { reload: true }));\n  }\n\n  render () {\n    let {contact} = this.state;\n    return (\n      <div className=\"contact\">\n        <ContactForm contact={contact} onContactChange={this.handleChangeContact} />\n        <hr />\n        <div>\n          <UISref to={'^'}><button className=\"btn btn-primary\"><i className=\"fa fa-close\" /><span>Cancel</span></button></UISref>\n          <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save</span></button>\n          <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /><span>Delete</span></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditContact;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {get, set} from 'lodash';\n\nconst formInputs = [\n  { label: 'First',   path: 'name.first' },\n  { label: 'Last',   path: 'name.last' },\n  { label: 'Company', path: 'company' },\n  { label: 'Age',   path: 'age' },\n  { label: 'Phone',   path: 'phone' },\n  { label: 'Email',   path: 'email' },\n  { label: 'Street',  path: 'address.street' },\n  { label: 'City',   path: 'address.city' },\n  { label: 'State',   path: 'address.state' },\n  { label: 'Zip',   path: 'address.zip' },\n  { label: 'Image',   path: 'picture' }\n];\n\nclass ContactForm extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n    onContactChange: PropTypes.func\n  }\n  handleChangeFor = (path) => {\n    const {contact, onContactChange} = this.props;\n    return event => {\n      onContactChange(set({ ...contact }, path, event.target.value));\n    }\n  }\n  render () {\n    let {contact} = this.props;\n    let inputs = formInputs.map(input =>\n      <div key={input.path}>\n        <label>{input.label}</label>\n        <input type=\"text\" value={get(contact, input.path)} onChange={this.handleChangeFor(input.path)}/>\n      </div>\n    );\n    return (\n      <div className=\"details\">\n        {inputs}\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n"],"sourceRoot":""}