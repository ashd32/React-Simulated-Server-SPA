{"version":3,"sources":["webpack:///./src/mymessages/states.js","webpack:///./src/global/dataSources.js","webpack:///./src/util/sessionStorage.js","webpack:///./src/util/util.js","webpack:///./src/mymessages/messageListUIService.js","webpack:///./src/mymessages/Compose.js","webpack:///./src/mymessages/MyMessages.js","webpack:///./src/mymessages/Message.js","webpack:///./src/mymessages/MessageList.js","webpack:///./src/mymessages/components/MessageTable.js","webpack:///./src/mymessages/components/SortMessages.js"],"names":["composeState","name","url","params","message","views","Compose","mymessagesState","parent","resolve","token","resolveFn","FoldersStorage","all","redirectTo","component","MyMessages","data","requiresAuth","messageState","deps","$transition$","MessagesStorage","get","messageId","messages","MessageListUI","proximalMessageId","bind","Message","messageListState","folderId","folder","byFolder","MessageList","states","Contacts","SessionStorage","Folders","Messages","searchObject","_id","indexOf","AppConfig","emailAddress","this","search","ContactsStorage","sessionStorageKey","sourceUrl","fromSession","sessionStorage","getItem","_data","undefined","_idProp","_eqFn","l","r","JSON","parse","e","console","log","stripHashKey","obj","setProp","Promise","fetch","then","resp","json","_commit","array","map","setItem","stringify","thenFn","reject","setTimeout","restDelay","exampleItem","matchesExample","example","item","Object","keys","reduce","memo","key","items","filter","id","find","save","put","post","guid","pushToArr","eqFn","idx","findIndex","Error","remove","splice","val","push","guidChar","uniqReduce","arr","flattenReduce","concat","c","Math","floor","random","toString","toUpperCase","split","join","orderBy","predicate","descending","charAt","substring","a","b","result","valA","valB","instance","sorted","sort","msg","proximalIdx","length","props","uiCanExit","canExit","isEqual","pristineMessage","state","DialogService","confirm","gotoPreviousState","transition","hasPrevious","from","router","stateService","go","send","date","Date","read","handleChangeMessage","detail","setState","target","value","body","to","subject","$stateParams","className","type","onChange","cols","rows","onClick","Component","propTypes","PropTypes","shape","object","folders","UISrefActive","class","UISref","UIView","arrayOf","messageBody","__html","p","prefixSubject","prefix","makeResponseMsg","quoteMessage","reply","replyMsg","forward","fwdMsg","editDraft","nextMessageId","nextMessageGetter","nextState","reload","actions","action","edit","delete","dangerouslySetInnerHTML","func","string","columns","tableColumns","label","MessageTable","colVisible","changeSort","formattedContent","col","toISOString","slice","style","fontSize","visibleColumns","column","tableHead","onChangeSort","tableBody","SortMessages","handleClick","sortClass","chevron","paddingLeft"],"mappings":"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","file":"2.bundle.js","sourcesContent":["import {FoldersStorage, MessagesStorage} from '../global/dataSources';\nimport MessageListUI from './messageListUIService';\n\nimport Compose from './Compose';\nimport MyMessages from './MyMessages';\nimport Message from './Message';\nimport MessageList from './MessageList';\n/**\n* This state allows the user to compose a new message, edit a drafted message, send a message,\n* or save an unsent message as a draft.\n*\n* This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n*/\nconst composeState = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    \"!$default.$default\": Compose\n  }\n};\n\n/**\n* The mymessages state. This is the main state for the mymessages page.\n*\n* This state shows the list of folders for the current user. It retrieves the folders from the\n* Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n*/\nconst mymessagesState = {\n  parent: 'app',\n  name: \"mymessages\",\n  url: \"/mymessages\",\n  resolve: [\n    // All the folders are fetched from the Folders service\n    {\n      token: 'folders',\n      resolveFn: () => FoldersStorage.all(),\n    },\n  ],\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  component: MyMessages,\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n/**\n* This state shows the contents of a single message.\n* It also has UI to reply, forward, delete, or edit an existing draft.\n*/\nconst messageState = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  resolve: [\n    // Fetch the message from the Messages service using the messageId parameter\n    {\n      token: 'message',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => MessagesStorage.get($transition$.params().messageId),\n    },\n    // Provide the component with a function it can query that returns the closest message id\n    {\n      token: 'nextMessageGetter',\n      deps: ['messages'],\n      resolveFn: (messages) => MessageListUI.proximalMessageId.bind(MessageListUI, messages),\n    },\n  ],\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    \"^.^.messagecontent\": Message\n  }\n};\n\n\n/**\n* This state shows the contents (a message list) of a single folder\n*/\nconst messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL. This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: {folderId: \"inbox\"},\n  resolve: [\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    {\n      token: 'folder',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => FoldersStorage.get($transition$.params().folderId),\n    },\n    // The resolved folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    {\n      token: 'messages',\n      deps: ['folder'],\n      resolveFn: (folder) => MessagesStorage.byFolder(folder),\n    }\n  ],\n  views: {\n    // This targets the \"messagelist\" named UIView added to the DOM in the parent state 'mymessages'\n    \"messagelist\": MessageList\n  }\n};\n\nexport const states = [composeState, messageState, messageListState, mymessagesState];\n","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import AppConfig from '../global/appConfig';\n\nexport function orderBy (predicate) {\n  let descending = 1;\n  if (predicate.charAt(0) === '+' || predicate.charAt(0) === '-') {\n    descending = predicate.charAt(0) === '-' ? -1 : 1;\n    predicate = predicate.substring(1);\n  }\n  return (a, b) => {\n    let result = 0;\n    let valA = a[predicate], valB = b[predicate];\n    if (valA < valB) result = -1;\n    if (valA > valB) result = 1;\n    return result * descending;\n  }\n}\n\nclass MessageListUI {\n  proximalMessageId (messages, messageId) {\n    let sorted = messages.sort(orderBy(AppConfig.sort));\n    let idx = sorted.findIndex(msg => msg._id === messageId);\n    var proximalIdx = sorted.length > idx + 1 ? idx + 1 : idx - 1;\n    return proximalIdx >= 0 ? sorted[proximalIdx]._id : undefined;\n  }\n}\n\nlet instance = new MessageListUI();\nexport default instance;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {isEqual} from 'lodash';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport AppConfig from '../global/appConfig';\nimport DialogService from '../global/dialogService';\n/**\n* This component composes a message\n*\n* The message might be new, a saved draft, or a reply/forward.\n* A Cancel button discards the new message and returns to the previous state.\n* A Save As Draft button saves the message to the \"drafts\" folder.\n* A Send button sends the message\n*/\nclass Compose extends Component {\n  static propTypes = {\n    $stateParams: PropTypes.shape({\n      message: PropTypes.object\n    }),\n  }\n  /**\n  * Create our message's model using the current user's email address as 'message.from'\n  * Then extend it with all the properties from (non-url) state parameter 'message'.\n  * Keep two copies: the editable one and the original one.\n  * These copies are used to check if the message is dirty.\n  */\n  constructor(props) {\n    super(props);\n    this.pristineMessage = { body: '', to: '', subject: '', from: AppConfig.emailAddress, ...this.props.$stateParams.message };\n    this.state = {\n      message: { ...this.pristineMessage }\n    }\n  }\n  /**\n  * Checks if the edited copy and the pristine copy are identical when the state is changing.\n  * If they are not identical, the allows the user to confirm navigating away without saving.\n  */\n  uiCanExit = () => {\n    if (this.canExit || isEqual(this.pristineMessage, this.state.message)) return true;\n\n    var message = 'You have not saved this message.';\n    var question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question, \"Yes\", \"No\");\n  }\n  /**\n  * Navigates back to the previous state.\n  *\n  * - Checks the transition which activated this controller for a 'from state' that isn't the implicit root state.\n  * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n  */\n  gotoPreviousState = () => {\n    let transition = this.props.transition;\n    let hasPrevious = !!transition.from().name;\n    let state = hasPrevious ? transition.from() : \"mymessages.messagelist\";\n    let params = hasPrevious ? transition.params(\"from\") : {};\n    transition.router.stateService.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'sent' })\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'drafts'})\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  }\n\n  handleChangeMessage = (detail) => (e) => this.setState({ message: { ...this.state.message, [detail]: e.target.value } });\n\n  render () {\n    let message = this.state.message;\n    return (\n      <div className=\"compose\">\n        <div className=\"header\">\n          <div className=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" value={message.to} onChange={this.handleChangeMessage('to')} /> </div>\n          <div className=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" value={message.subject} onChange={this.handleChangeMessage('subject')} /> </div>\n        </div>\n\n        <div className=\"body\">\n          <textarea name=\"body\" id=\"body\" value={message.body} cols=\"30\" rows=\"20\" onChange={this.handleChangeMessage('body')} />\n\n          <div className=\"buttons\">\n            {/* Clicking this button brings the user back to the state they came from (previous state) */}\n            <button className=\"btn btn-primary\" onClick={this.gotoPreviousState}><i className=\"fa fa-times-circle-o\" /><span>Cancel</span></button>\n            <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save as Draft</span></button>\n            <button className=\"btn btn-primary\" onClick={this.send}><i className=\"fa fa-paper-plane-o\" /><span>Send</span></button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Compose;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView, UISref, UISrefActive} from '@uirouter/react';\n\n/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\nclass MyMessages extends Component {\n  static propTypes = {\n    folders: PropTypes.arrayOf(PropTypes.object)\n  }\n\n  render () {\n    let folders = this.props.folders.map(folder => (\n      // Highlight the selected folder:\n      // When the current state matches the UISref's state (and its parameters)\n      // UISrefActive applies the 'selected' class to the li element\n      <UISrefActive key={folder._id} class=\"selected\">\n        <li className=\"folder\">\n          {/* This UISref is a relative link to the 'mymessages.messagelist' substate. It provides the\n            'folderId' parameter value from the current folder's ._id property */}\n          <UISref to=\".messagelist\" params={{folderId:folder._id}}><a><i className=\"fa\"/>{folder._id}</a></UISref>\n        </li>\n      </UISrefActive>\n    ));\n    return (\n      <div>\n        <div className=\"my-messages\">\n          <div className=\"folderlist\">\n            <ul className=\"selectlist list-unstyled\">\n              {folders}\n            </ul>\n          </div>\n          {/* A named view for the list of messages in this folder. This will be filled in by the 'mymessages.messagelist' child state */}\n          <UIView name=\"messagelist\" className=\"messagelist\" />\n        </div>\n        {/*  A named UIView for a message's contents. The 'mymessages.messagelist.message' grandchild state plugs into this UIView */}\n        <UIView name=\"messagecontent\" />\n      </div>\n    );\n  }\n}\n\nexport default MyMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n\nconst messageBody = (msg = '') => ({ __html: msg.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n') });\nconst prefixSubject = (prefix, message) => prefix + message.subject;\nconst makeResponseMsg = (prefix, msg) => ({ from: msg.to, to: msg.from, subject: prefixSubject(prefix, msg), body: quoteMessage(msg)});\nconst quoteMessage = message => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/**\n* This component renders a single message\n*\n* Buttons perform actions related to the message.\n* Buttons are shown/hidden based on the folder's context.\n* For instance, a \"draft\" message can be edited, but can't be replied to.\n*/\nclass Message extends Component {\n  static propTypes = {\n    message: PropTypes.object,\n    nextMessageGetter: PropTypes.func,\n    folder: PropTypes.shape({\n      actions: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  constructor (props) {\n    super(props);\n    // Apply the available actions for the message, depending on the folder the message belongs to.\n    this.actions = props.folder.actions.reduce((obj, action) => { obj[action] = true; return obj; }, {});\n    this.stateService = this.props.transition.router.stateService;\n  }\n  /**\n  * When the user views a message, mark it as read and save (PUT) the resource.\n  */\n  componentWillReceiveProps (props) {\n    let message = props.message;\n    message.read = true;\n    MessagesStorage.put(message);\n  }\n  /**\n  * Compose a new message as a reply to this one\n  */\n  reply = () => {\n    let {message} = this.props;\n    let replyMsg = makeResponseMsg(\"Re: \", message);\n    this.stateService.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n  * Compose a new message as a forward of this one.\n  */\n  forward = () => {\n    let {message} = this.props;\n    let fwdMsg = makeResponseMsg(\"Fwd: \", message);\n    delete fwdMsg.to;\n    this.stateService.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n  * Continue composing this (draft) message\n  */\n  editDraft = () => {\n    let {message} = this.props;\n    this.stateService.go('mymessages.compose', { message: message });\n  };\n\n  /**\n  * Delete this message.\n  *\n  * - confirm deletion\n  * - delete the message\n  * - determine which message should be active\n  * - show that message\n  */\n  remove = () => {\n    let {message} = this.props;\n    let nextMessageId = this.props.nextMessageGetter(message._id);\n    let nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    let params = { messageId: nextMessageId };\n\n    DialogService.confirm(\"Delete?\", undefined)\n      .then(() => MessagesStorage.remove(message))\n      .then(() => this.stateService.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n  render () {\n    let { folder, message, nextMessageGetter } = this.props;\n    return (\n      <div className=\"message\">\n        <div className=\"header\">\n          <div>\n            <h4>{message.subject}</h4>\n            <h5>{message.from} <i className=\"fa fa-long-arrow-right\" /> {message.to}</h5>\n          </div>\n          <div className=\"line2\">\n            {/*<div>{{$ctrl.message.date | date: 'longDate'}} {{$ctrl.message.date | date: 'mediumTime'}}</div>*/}\n            <div>\n              {this.actions.edit ? <button className=\"btn btn-primary\" onClick={this.editDraft}><i className=\"fa fa-pencil\" /> <span>Edit Draft</span></button> : null}\n              {this.actions.reply ? <button className=\"btn btn-primary\" onClick={this.reply}><i className=\"fa fa-reply\" /> <span>Reply</span></button> : null}\n              {this.actions.forward ? <button className=\"btn btn-primary\" onClick={this.forward}><i className=\"fa fa-forward\" /> <span>Forward</span></button> : null}\n              {this.actions.delete ? <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /> <span>Delete</span></button> : null}\n            </div>\n          </div>\n        </div>\n        {/* Pass the raw (plain text) message body through the messageBody function to format slightly nicer */}\n        <div className=\"body\" dangerouslySetInnerHTML={messageBody(message.body)}></div>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport MessageTable from './components/MessageTable';\n\n/**\n * This component renders a list of messages using the `MessageTable` component\n */\nclass MessageList extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    folder: PropTypes.shape({\n      columns: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  render () {\n    let {folder, messages} = this.props;\n    return (\n      <div className=\"messagelist\">\n        <div className=\"messages\">\n          <MessageTable columns={folder.columns} messages={messages} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n\nimport {orderBy} from '../messageListUIService';\n\nimport AppConfig from '../../global/appConfig';\nimport SortMessages from './SortMessages';\n/**\n* A component that displays a folder of messages as a table\n*\n* If a row is clicked, the details of the message is shown using a relative UISref to `.message`.\n*\n* UISrefActive is used to highlight the selected row.\n*\n* Shows/hides specific columns based on the `columns` resolved prop.\n*/\nconst tableColumns = [\n  { label: '', name: 'read' },\n  { label: 'Sender', name: 'from' },\n  { label: 'Recipient', name: 'to' },\n  { label: 'Subject', name: 'subject' },\n  { label: 'Date', name: 'date' },\n];\n\nclass MessageTable extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    columns: PropTypes.arrayOf(PropTypes.string)\n  }\n  constructor (props) {\n    super(props);\n    this.state = { sort: AppConfig.sort }\n  }\n\n  colVisible = (name) => this.props.columns.indexOf(name) !== -1;\n  changeSort = (sort) => this.setState({sort});\n  formattedContent = (message, col) => {\n    if (col === 'date') return new Date(message[col]).toISOString().slice(0,10);\n    if (col === 'read') return !message[col] ? <i className=\"fa fa-circle\" style={{fontSize: '50%'}} /> : '';\n    return message[col];\n  }\n\n  render () {\n    let {sort} = this.state,\n      {messages} = this.props;\n\n    let visibleColumns = tableColumns.filter(column => this.colVisible(column.name));\n    let tableHead = visibleColumns.map(column =>\n      <td key={column.name}><SortMessages label={column.label} col={column.name} sort={sort} onChangeSort={this.changeSort} /></td>\n    );\n    let tableBody = messages.sort(orderBy(sort)).map(message =>\n      <UISrefActive key={message._id} class=\"active\">\n        <UISref to=\".message\" params={{messageId:message._id}}>\n          <tr>{visibleColumns.map(column =>\n            <td key={column.name}>{this.formattedContent(message, column.name)}</td>\n          )}</tr>\n        </UISref>\n      </UISrefActive>\n    );\n    return (\n      <table>\n        <thead>\n          <tr>{tableHead}</tr>\n        </thead>\n        <tbody>\n          {tableBody}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default MessageTable;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n/**\n * A directive (for a table header) which changes the app's sort order\n */\nclass SortMessages extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    col: PropTypes.string,\n    sort: PropTypes.string,\n    onChangeSort: PropTypes.func\n  }\n  handleClick = (e) => {\n    let {col, sort, onChangeSort} = this.props;\n    let newSort = sort === `+${col}`\n      ? `-${col}`\n      : `+${col}`;\n    onChangeSort(newSort);\n  }\n  render () {\n    let {col, label, sort} = this.props, sortClass = '';\n    if (sort == `+${col}`) sortClass = 'fa-sort-asc';\n    else if (sort == `-${col}`) sortClass = 'fa-sort-desc';\n    let chevron = <i style={{paddingLeft:'0.25em'}} className={'fa '+sortClass} />\n\n    return (\n      <span onClick={this.handleClick}>{label} {chevron}</span>\n    );\n  }\n}\n\nexport default SortMessages;\n"],"sourceRoot":""}