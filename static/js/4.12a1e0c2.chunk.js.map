{"version":3,"sources":["util/util.js","util/sessionStorage.js","global/dataSources.js","contacts/components/ContactList.js","contacts/Contacts.js","contacts/components/ContactDetail.js","contacts/ContactView.js","contacts/components/ContactForm.js","contacts/EditContact.js","contacts/states.js"],"names":["pushToArr","array","item","push","guidChar","c","Math","floor","random","toString","toUpperCase","SessionStorage","sessionStorageKey","sourceUrl","_commit","data","sessionStorage","setItem","JSON","stringify","Promise","resolve","all","thenFn","reject","setTimeout","_data","AppConfig","restDelay","then","search","exampleItem","matchesExample","example","Object","keys","reduce","memo","key","indexOf","items","filter","bind","get","id","find","_idProp","save","put","post","split","map","join","eqFn","_eqFn","idx","findIndex","Error","remove","splice","fromSession","getItem","this","undefined","l","r","parse","e","console","log","stripHashKey","obj","val","setProp","fetch","resp","json","Contacts","Folders","Messages","folder","searchObject","_id","emailAddress","ContactsStorage","FoldersStorage","MessagesStorage","ContactList","props","newContact","to","className","contacts","contact","index","class","params","contactId","href","name","first","last","Component","style","margin","ContactDetail","company","age","phone","email","address","street","city","state","zip","src","picture","ContactView","composeButton","message","editContactButton","formInputs","label","path","ContactForm","handleChangeFor","onContactChange","event","set","target","value","inputs","input","type","onChange","EditContact","uiCanExit","trans","canExit","isEqual","DialogService","confirm","handleChangeContact","setState","stateService","transition","router","go","reload","cloneDeep","onClick","states","parent","url","token","resolveFn","requiresAuth","component","deps","$transition$","views"],"mappings":"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","file":"static/js/4.12a1e0c2.chunk.js","sourcesContent":["/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n/**\n * This component renders a list of contacts.\n *\n * At the top is a \"new contact\" button.\n * Each list item is a clickable link to the `contacts.contact` details substate\n */\nclass ContactList extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object)\n  }\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    // This link is a relative ui-sref to the contacts.new state.\n    let newContact = (\n      <UISref to={'.new'}>\n        <a><button className=\"btn btn-primary\"><i className=\"fa fa-pencil\"></i><span>New Contact</span></button></a>\n      </UISref>\n    );\n    // When the current state matches the ui-sref's state (and its parameters)\n    // UISrefActive applies the 'selected' class to the li element\n    let contacts = this.props.contacts.map((contact, index) =>\n      <li key={index}>\n        <UISrefActive class=\"selected\">\n          <UISref to={'.contact'} params={{contactId:contact._id}}><a href=\"asd\">{contact.name.first + ' ' + contact.name.last}</a></UISref>\n        </UISrefActive>\n      </li>\n    );\n    return (\n      <div className={this.props.className}>\n        <ul className=\"selectlist list-unstyled flex nogrow\">\n          <li>{newContact}</li>\n          <li>&nbsp;</li>\n          {contacts}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ContactList;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView} from '@uirouter/react';\n\nimport ContactList from './components/ContactList';\n/**\n * This component renders the contacts page.\n *\n * On the left is the list of contacts.\n * On the right is the ui-view viewport where contact details appear.\n */\nclass Contacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n  }\n\n  constructor (props) {\n    super(props);\n  }\n\n  render () {\n    let {contacts} = this.props;\n    return (\n      <div className=\"my-contacts flex-h\">\n        <ContactList contacts={contacts} className=\"flex nogrow\" />\n        <UIView><h4 style={{margin: '1em 2em'}}>Select a contact</h4></UIView>\n      </div>\n    );\n  }\n}\n\nexport default Contacts;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * This component renders a read only view of the details for a single contact.\n */\nclass ContactDetail extends Component {\n  static propTypes = {\n    contact: PropTypes.object\n  }\n  render () {\n    let {contact} = this.props;\n    return (\n      <div className=\"flex-h\">\n        <div className=\"details\">\n          <h3>{contact.name.first + ' ' + contact.name.last}</h3>\n          <div><label>Company</label><div>{contact.company}</div></div>\n          <div><label>Age</label><div>{contact.age}</div></div>\n          <div><label>Phone</label><div>{contact.phone}</div></div>\n          <div><label>Email</label><div>{contact.email}</div></div>\n          <div className=\"flex-h\">\n            <label>Address</label>\n            <div>{contact.address.street}<br />\n              {contact.address.city + ', ' + contact.address.state + ' ' + contact.address.zip}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex nogrow\">\n          <img src={contact.picture}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactDetail;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref} from '@uirouter/react';\n\nimport ContactDetail from './components/ContactDetail';\n/**\n* This component renders details for a single contact\n*\n* A button messages the contact by linking to `mymessages.compose` state passing the email as a state parameter.\n* Another button edits the contact by linking to `contacts.contact.edit` state.\n*/\n\nclass ContactView extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n  }\n\n  render () {\n    let {contact} = this.props;\n\n    // This button has an ui-sref to the mymessages.compose state. The ui-sref provides the mymessages.compose\n    // state with an non-url parameter, which is used as the initial message model\n    let composeButton = (\n      <UISref to={'mymessages.compose'} params={{message: {to: contact.email}}}>\n        <button className=\"btn btn-primary\">\n          <i className=\"fa fa-envelope\" /><span>Message</span>\n        </button>\n      </UISref>\n    );\n\n    // This button has a relative ui-sref to the contacts.contact.edit state\n    let editContactButton = (\n      <UISref to={'.edit'}>\n        <button className=\"btn btn-primary\">\n          <i className=\"fa fa-pencil\" /><span>Edit Contact</span>\n        </button>\n      </UISref>\n    );\n\n    return (\n      <div className=\"contact\">\n        <ContactDetail contact={contact} />\n        {composeButton}\n        {' '}\n        {editContactButton}\n      </div>\n    );\n  }\n}\n\nexport default ContactView;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {get, set} from 'lodash';\n\nconst formInputs = [\n  { label: 'First',   path: 'name.first' },\n  { label: 'Last',   path: 'name.last' },\n  { label: 'Company', path: 'company' },\n  { label: 'Age',   path: 'age' },\n  { label: 'Phone',   path: 'phone' },\n  { label: 'Email',   path: 'email' },\n  { label: 'Street',  path: 'address.street' },\n  { label: 'City',   path: 'address.city' },\n  { label: 'State',   path: 'address.state' },\n  { label: 'Zip',   path: 'address.zip' },\n  { label: 'Image',   path: 'picture' }\n];\n\nclass ContactForm extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n    onContactChange: PropTypes.func\n  }\n  handleChangeFor = (path) => {\n    const {contact, onContactChange} = this.props;\n    return event => {\n      onContactChange(set({ ...contact }, path, event.target.value));\n    }\n  }\n  render () {\n    let {contact} = this.props;\n    let inputs = formInputs.map(input =>\n      <div key={input.path}>\n        <label>{input.label}</label>\n        <input type=\"text\" value={get(contact, input.path)} onChange={this.handleChangeFor(input.path)}/>\n      </div>\n    );\n    return (\n      <div className=\"details\">\n        {inputs}\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref} from '@uirouter/react';\nimport {isEqual, cloneDeep} from 'lodash';\n\nimport ContactForm from './components/ContactForm';\nimport {ContactsStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n/**\n* The EditContact component\n*\n* This component is used by both `contacts.contact.edit` and `contacts.new` states.\n*\n* The component makes a copy of the contact data for editing by assigning it to the component state.\n* The new copy and original (pristine) copy are used to determine if the contact is \"dirty\" or not.\n* If the user navigates to some other state while the contact is \"dirty\", the `uiCanExit` component\n* hook asks the user to confirm navigation away, losing any edits.\n*\n* The Delete Contact button is wired to the `remove` method, which:\n* - asks for confirmation from the user\n* - deletes the resource from REST API\n* - navigates back to the contacts grandparent state using relative addressing `^.^`\n*   the `reload: true` option re-fetches the contacts list from the server\n*\n* The Save Contact button is wired to the `save` method which:\n* - saves the REST resource (PUT or POST, depending)\n* - navigates back to the parent state using relative addressing `^`.\n*   when editing an existing contact, this returns to the `contacts.contact` \"view contact\" state\n*   when creating a new contact, this returns to the `contacts` list.\n*   the `reload: true` option re-fetches the contacts resolve data from the server\n*/\nclass EditContact extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n  }\n\n  constructor (props) {\n    super(props);\n    this.canExit = false;\n    this.state = {\n      contact: cloneDeep(this.props.contact)\n    }\n  }\n\n  uiCanExit = (trans) => {\n    if (this.canExit || isEqual(this.state.contact, this.props.contact)) return true;\n\n    let message = 'You have unsaved changes to this contact.';\n    let question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question);\n  }\n\n  handleChangeContact = (contact) => {\n    this.setState({ contact });\n  }\n\n  save = () => {\n    // Save the contact, then go to the parent state (either 'contacts' or 'contacts.contact')\n    const {stateService} = this.props.transition.router;\n    ContactsStorage.save(this.state.contact)\n      .then(() => this.canExit = true)\n      .then(() => stateService.go('^', null, { reload: true }));\n  }\n\n  remove = () => {\n    // Ask for confirmation, then delete the contact, then go to the grandparent state ('contacts')\n    let {contact} = this.state;\n    const {stateService} = this.props.transition.router;\n    DialogService.confirm(`Delete contact: ${contact.name.first} ${contact.name.last}`)\n      .then(() => ContactsStorage.remove(contact))\n      .then(() => this.canExit = true)\n      .then(() => stateService.go(\"^.^\", null, { reload: true }));\n  }\n\n  render () {\n    let {contact} = this.state;\n    return (\n      <div className=\"contact\">\n        <ContactForm contact={contact} onContactChange={this.handleChangeContact} />\n        <hr />\n        <div>\n          <UISref to={'^'}><button className=\"btn btn-primary\"><i className=\"fa fa-close\" /><span>Cancel</span></button></UISref>\n          <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save</span></button>\n          <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /><span>Delete</span></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditContact;\n","import {ContactsStorage} from '../global/dataSources';\n\nimport Contacts from './Contacts';\nimport ContactView from './ContactView';\nimport EditContact from './EditContact';\n\n/**\n* This state displays the contact list.\n* It also provides a nested ui-view (viewport) for child states to fill in.\n*\n* The contacts are fetched using a resolve.\n*/\nconst contactsState = {\n  parent: 'app', // declares that 'contacts' is a child of 'app'\n  name: \"contacts\",\n  url: \"/contacts\",\n  resolve: [\n    // Resolve all the contacts. The resolved contacts are injected as props into the Contacts component.\n    {\n      token: 'contacts',\n      resolveFn: () => ContactsStorage.all(),\n    }\n  ],\n  data: { requiresAuth: true },\n  component: Contacts\n};\n\n/**\n* This state displays a single contact.\n* The contact to display is fetched using a resolve, based on the `contactId` parameter.\n*/\nconst viewContactState = {\n  name: 'contacts.contact',\n  url: '/:contactId',\n  resolve: [\n    // Resolve the contact, based on the contactId parameter value.\n    // The resolved contact is provided to the contactComponent's contact binding\n    {\n      token: 'contact',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => ContactsStorage.get($transition$.params().contactId),\n    }\n  ],\n  component: ContactView\n};\n\n/**\n* This state allows a user to edit a contact\n*\n* The contact data to edit is injected from the parent state's resolve.\n*\n* This state uses view targeting to replace the parent ui-view (which would normally be filled\n* by 'contacts.contact') with the edit contact template/controller\n*/\nconst editContactState = {\n  name: 'contacts.contact.edit',\n  url: '/edit',\n  views: {\n    // Relatively target the grand-parent-state's $default (unnamed) ui-view\n    // This could also have been written using ui-view@state addressing: $default@contacts\n    // Or, this could also have been written using absolute ui-view addressing: !$default.$default.$default\n    '^.^.$default': {\n      //bindings: { pristineContact: \"contact\" },\n      component: EditContact\n    }\n  }\n};\n\n/**\n* This state allows a user to create a new contact\n*\n* The contact data to edit is injected into the component from the parent state's resolve.\n*/\nconst newContactState = {\n  name: 'contacts.new',\n  url: '/new',\n  component: EditContact\n};\n\nexport const states = [contactsState, viewContactState, editContactState, newContactState];\n"],"sourceRoot":""}