{"version":3,"sources":["util/util.js","util/sessionStorage.js","global/dataSources.js","mymessages/messageListUIService.js","mymessages/Compose.js","mymessages/MyMessages.js","mymessages/Message.js","mymessages/components/SortMessages.js","mymessages/components/MessageTable.js","mymessages/MessageList.js","mymessages/states.js"],"names":["pushToArr","array","item","push","guidChar","c","Math","floor","random","toString","toUpperCase","SessionStorage","sessionStorageKey","sourceUrl","_this","this","Object","classCallCheck","_commit","data","sessionStorage","setItem","JSON","stringify","Promise","resolve","all","thenFn","reject","setTimeout","_data","AppConfig","restDelay","then","search","exampleItem","items","filter","example","keys","reduce","memo","key","indexOf","bind","get","id","find","_idProp","save","put","post","split","map","join","eqFn","arguments","length","undefined","_eqFn","idx","findIndex","Error","concat","remove","splice","fromSession","getItem","l","r","parse","e","console","log","stripHashKey","obj","val","setProp","fetch","resp","json","Contacts","possibleConstructorReturn","getPrototypeOf","call","Folders","Messages","folder","searchObject","_id","emailAddress","ContactsStorage","FoldersStorage","MessagesStorage","orderBy","predicate","descending","charAt","substring","a","b","result","valA","valB","instance","messages","messageId","sorted","sort","msg","proximalIdx","Compose","props","uiCanExit","canExit","isEqual","pristineMessage","state","message","DialogService","confirm","gotoPreviousState","transition","hasPrevious","from","name","params","router","stateService","go","send","_objectSpread","date","Date","read","handleChangeMessage","detail","setState","defineProperty","target","value","body","to","subject","$stateParams","react_default","createElement","className","type","onChange","cols","rows","onClick","Component","MyMessages","folders","lib_esm","class","folderId","messageBody","__html","p","prefixSubject","prefix","makeResponseMsg","quoteMessage","Message","reply","replyMsg","forward","fwdMsg","editDraft","nextMessageId","nextMessageGetter","nextState","reload","actions","action","_this$props","edit","delete","dangerouslySetInnerHTML","SortMessages","handleClick","col","onChangeSort","_this$props2","label","sortClass","chevron","style","paddingLeft","tableColumns","MessageTable","colVisible","columns","changeSort","formattedContent","toISOString","slice","fontSize","_this2","visibleColumns","column","tableHead","components_SortMessages","tableBody","MessageList","components_MessageTable","__webpack_require__","d","__webpack_exports__","states","url","views","!$default.$default","token","deps","resolveFn","$transition$","MessageListUI","proximalMessageId","^.^.messagecontent","byFolder","messagelist","parent","redirectTo","component","requiresAuth"],"mappings":"wLAGaA,EAAY,SAACC,EAAOC,GAA6B,OAAlBD,EAAME,KAAKD,GAAcD,GAGjEG,EAAW,SAACC,GAAD,MAAa,MAANA,GAAmB,MAANA,EAAY,IAAMC,KAAKC,MAAoB,GAAdD,KAAKE,UAAaC,SAAS,IAAIC,e,QCSlFC,EAOX,SAAAA,EAAaC,EAAmBC,GAAY,IAADC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAJ,GAAAI,KAmC3CG,QAAU,SAACC,GAET,OADAC,eAAeC,QAAQP,EAAKF,kBAAmBU,KAAKC,UAAUJ,IACvDK,QAAQC,QAAQN,IArCkBJ,KAyC3CW,IAAM,SAACC,GAIL,OAHc,IAAIH,QAAQ,SAACC,EAASG,GAClCC,WAAW,kBAAMJ,EAAQX,EAAKgB,QAAQC,IAAUC,aAEnCC,KAAKN,IA7CqBZ,KAiD3CmB,OAAS,SAACC,GAKR,OAAOrB,EAAKY,IAAI,SAAAU,GAAK,OAAIA,EAAMC,OAFV,SAACC,EAASpC,GAAV,OACnBc,OAAOuB,KAAKD,GAASE,OAAO,SAACC,EAAMC,GAAP,OAAeD,IAH7BP,EAG8CI,EAAQI,IAF1B,KAAzC,GAEyExC,EAAKwC,IAF/DC,QAAQ,GAAKT,IADhB,IAACA,IAGwE,IACnCU,KAAK,KAAMT,OAtDvBpB,KA0D3C8B,IAAM,SAACC,GACL,OAAOhC,EAAKY,IAAI,SAAAU,GAAK,OAAIA,EAAMW,KAAK,SAAA7C,GAAI,OAAIA,EAAKY,EAAKkC,WAAaF,OA3D1B/B,KA+D3CkC,KAAO,SAAC/C,GACN,OAAOA,EAAKY,EAAKkC,SAAWlC,EAAKoC,IAAIhD,GAAQY,EAAKqC,KAAKjD,IAhEda,KAoE3CoC,KAAO,SAACjD,GAEN,OADAA,EAAKY,EAAKkC,SDpFY,uCAAuCI,MAAM,IAAIC,IAAIjD,GAAUkD,KAAK,ICqFnFxC,EAAKY,IAAI,SAAAU,GAAK,OAAIpC,EAAUoC,EAAOlC,KAAO+B,KAAKnB,EAAKI,QAAQ0B,KAAK9B,KAtE/BC,KA0E3CmC,IAAM,SAAChD,GAA6B,IAAvBqD,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf1C,EAAK6C,MACvB,OAAO7C,EAAKY,IAAI,SAAAU,GACd,IAAIwB,EAAMxB,EAAMyB,UAAUN,EAAKX,KAAK,KAAM1C,IAC1C,IAAa,IAAT0D,EAAY,MAAME,MAAM,GAADC,OAAI7D,EAAJ,kBAAA6D,OAAyBjD,IAEpD,OADAsB,EAAMwB,GAAO1D,EACNY,EAAKI,QAAQkB,GAAOH,KAAK,kBAAM/B,OA/ECa,KAoF3CiD,OAAS,SAAC9D,GAA6B,IAAvBqD,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf1C,EAAK6C,MAC1B,OAAO7C,EAAKY,IAAI,SAAAU,GACd,IAAIwB,EAAMxB,EAAMyB,UAAUN,EAAKX,KAAK,KAAM1C,IAC1C,IAAa,IAAT0D,EAAY,MAAME,MAAM,GAADC,OAAI7D,EAAJ,kBAAA6D,OAAyBjD,IAEpD,OADAsB,EAAM6B,OAAOL,EAAK,GACX9C,EAAKI,QAAQkB,GAAOH,KAAK,kBAAM/B,OAxFxC,IAAIiB,EAAM+C,EAAc9C,eAAe+C,QAAQvD,GAa/C,GAXAG,KAAKe,WAAQ4B,EAGb3C,KAAKiC,QAAU,MAGfjC,KAAK4C,MAAQ,SAACS,EAAGC,GAAJ,OAAUD,EAAEtD,EAAKkC,WAAaqB,EAAEvD,EAAKkC,UAGlDjC,KAAKH,kBAAoBA,EAErBsD,EACF,IAEE/C,EAAOG,KAAKgD,MAAMJ,GAClB,MAAOK,GACPC,QAAQC,IAAI,6DAIhB,IAAIC,EAAe,SAACC,GAAD,OD3CA,SAACA,EAAKjC,EAAKkC,GAA0B,OAAhBD,EAAIjC,GAAOkC,EAAYD,EC4C7DE,CAAQF,EAAK,iBAAajB,IAG5B3C,KAAKe,OAASX,EAAOK,QAAQC,QAAQN,GAAQ2D,MAAMjE,GAAWoB,KAAK,SAAA8C,GAAI,OAAGA,EAAKC,UAC5E/C,KAAKlB,KAAKG,SACVe,KAAK,kBAAMX,KAAKgD,MAAMlD,eAAe+C,QAAQvD,MAC7CqB,KAAK,SAAAhC,GAAK,OAAIA,EAAMoD,IAAIqB,M,oGCjCzBO,E,YACJ,SAAAA,IAAc,OAACjE,OAAAC,EAAA,EAAAD,CAAAD,KAAAkE,GAADjE,OAAAkE,EAAA,EAAAlE,CAAAD,KAAAC,OAAAmE,EAAA,EAAAnE,CAAAiE,GAAAG,KAAArE,KAEN,WAAY,8B,2BAHCJ,GAQjB0E,E,YACJ,SAAAA,IAAe,OAAArE,OAAAC,EAAA,EAAAD,CAAAD,KAAAsE,GAAArE,OAAAkE,EAAA,EAAAlE,CAAAD,KAAAC,OAAAmE,EAAA,EAAAnE,CAAAqE,GAAAD,KAAArE,KACP,UAAW,6B,2BAFCJ,GAOhB2E,E,YACJ,SAAAA,IAAc,OAACtE,OAAAC,EAAA,EAAAD,CAAAD,KAAAuE,GAADtE,OAAAkE,EAAA,EAAAlE,CAAAD,KAAAC,OAAAmE,EAAA,EAAAnE,CAAAsE,GAAAF,KAAArE,KAEN,WAAY,8B,sEAGXwE,GACP,IAAIC,EAAe,CAAED,OAAQA,EAAOE,KAGpC,OADAD,GAD6D,IAA5C,CAAC,SAAU,QAAQ7C,QAAQ4C,EAAOE,KAAc,OAAS,MAC/C1D,IAAU2D,aAC9B3E,KAAKmB,OAAOsD,O,GAVA7E,GAcnBgF,EAAkB,IAAIV,EACtBW,EAAiB,IAAIP,EACrBQ,EAAkB,IAAIP,G,yEChDnB,SAASQ,EAASC,GACvB,IAAIC,EAAa,EAKjB,MAJ4B,MAAxBD,EAAUE,OAAO,IAAsC,MAAxBF,EAAUE,OAAO,KAClDD,EAAqC,MAAxBD,EAAUE,OAAO,IAAc,EAAI,EAChDF,EAAYA,EAAUG,UAAU,IAE3B,SAACC,EAAGC,GACT,IAAIC,EAAS,EACTC,EAAOH,EAAEJ,GAAYQ,EAAOH,EAAEL,GAGlC,OAFIO,EAAOC,IAAMF,GAAU,GACvBC,EAAOC,IAAMF,EAAS,GACnBA,EAASL,G,IAcLQ,EADA,I,0GARMC,EAAUC,GAC3B,IAAIC,EAASF,EAASG,KAAKd,EAAQ/D,IAAU6E,OACzChD,EAAM+C,EAAO9C,UAAU,SAAAgD,GAAG,OAAIA,EAAIpB,MAAQiB,IAC1CI,EAAcH,EAAOlD,OAASG,EAAM,EAAIA,EAAM,EAAIA,EAAM,EAC5D,OAAOkD,GAAe,EAAIH,EAAOG,GAAarB,SAAM/B,M,4oBC+EzCqD,E,YA1Eb,SAAAA,EAAYC,GAAQ,IAADlG,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAgG,IACjBjG,EAAAE,OAAAkE,EAAA,EAAAlE,CAAAD,KAAAC,OAAAmE,EAAA,EAAAnE,CAAA+F,GAAA3B,KAAArE,KAAMiG,KAURC,UAAY,WACV,GAAInG,EAAKoG,SAAWC,kBAAQrG,EAAKsG,gBAAiBtG,EAAKuG,MAAMC,SAAU,OAAO,EAI9E,OAAOC,IAAcC,QAFP,mCACC,kCACiC,MAAO,OAhBtC1G,EAwBnB2G,kBAAoB,WAClB,IAAIC,EAAa5G,EAAKkG,MAAMU,WACxBC,IAAgBD,EAAWE,OAAOC,KAClCR,EAAQM,EAAcD,EAAWE,OAAS,yBAC1CE,EAASH,EAAcD,EAAWI,OAAO,QAAU,GACvDJ,EAAWK,OAAOC,aAAaC,GAAGZ,EAAOS,IA7BxBhH,EAiCnBoH,KAAO,WACL,IAAIZ,EAAUxG,EAAKuG,MAAMC,QACzBzB,IAAgB5C,KAAhBkF,EAAA,GAA0Bb,EAA1B,CAAmCc,KAAM,IAAIC,KAAQC,MAAM,EAAM/C,OAAQ,UACtEtD,KAAK,kBAAMnB,EAAKoG,SAAU,IAC1BjF,KAAK,kBAAMnB,EAAK2G,uBArCF3G,EAyCnBmC,KAAO,WACL,IAAIqE,EAAUxG,EAAKuG,MAAMC,QACzBzB,IAAgB5C,KAAhBkF,EAAA,GAA0Bb,EAA1B,CAAmCc,KAAM,IAAIC,KAAQC,MAAM,EAAM/C,OAAQ,YACtEtD,KAAK,kBAAMnB,EAAKoG,SAAU,IAC1BjF,KAAK,kBAAMnB,EAAK2G,uBA7CF3G,EAgDnByH,oBAAsB,SAACC,GAAD,OAAY,SAACjE,GAAD,OAAOzD,EAAK2H,SAAS,CAAEnB,QAAQa,EAAD,GAAOrH,EAAKuG,MAAMC,QAAlBtG,OAAA0H,EAAA,EAAA1H,CAAA,GAA4BwH,EAASjE,EAAEoE,OAAOC,YA9C5G9H,EAAKsG,gBAALe,EAAA,CAAyBU,KAAM,GAAIC,GAAI,GAAIC,QAAS,GAAInB,KAAM7F,IAAU2D,cAAiB5E,EAAKkG,MAAMgC,aAAa1B,SACjHxG,EAAKuG,MAAQ,CACXC,QAAQa,EAAD,GAAOrH,EAAKsG,kBAJJtG,E,sEAmDjB,IAAIwG,EAAUvG,KAAKsG,MAAMC,QACzB,OACE2B,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,WACbF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,UACbF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,UAAf,IAAyBF,EAAA9C,EAAA+C,cAAA,0BAAzB,IAAkDD,EAAA9C,EAAA+C,cAAA,SAAOE,KAAK,OAAOtG,GAAG,KAAK+E,KAAK,KAAKe,MAAOtB,EAAQwB,GAAIO,SAAUtI,KAAKwH,oBAAoB,QAA7I,KACAU,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,UAAf,IAAyBF,EAAA9C,EAAA+C,cAAA,wBAAzB,IAAgDD,EAAA9C,EAAA+C,cAAA,SAAOE,KAAK,OAAOtG,GAAG,UAAU+E,KAAK,UAAUe,MAAOtB,EAAQyB,QAASM,SAAUtI,KAAKwH,oBAAoB,aAA1J,MAGFU,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,QACbF,EAAA9C,EAAA+C,cAAA,YAAUrB,KAAK,OAAO/E,GAAG,OAAO8F,MAAOtB,EAAQuB,KAAMS,KAAK,KAAKC,KAAK,KAAKF,SAAUtI,KAAKwH,oBAAoB,UAE5GU,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,WAEbF,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAK0G,mBAAmBwB,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,yBAAyBF,EAAA9C,EAAA+C,cAAA,uBAC3GD,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAKkC,MAAMgG,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,eAAeF,EAAA9C,EAAA+C,cAAA,8BACpFD,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAKmH,MAAMe,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,wBAAwBF,EAAA9C,EAAA+C,cAAA,4B,GA9EnFO,a,OCgCPC,E,iLA9BX,IAAIC,EAAU5I,KAAKiG,MAAM2C,QAAQtG,IAAI,SAAAkC,GAAM,OAIzC0D,EAAA9C,EAAA+C,cAACU,EAAA,EAAD,CAAclH,IAAK6C,EAAOE,IAAKoE,MAAM,YACnCZ,EAAA9C,EAAA+C,cAAA,MAAIC,UAAU,UAGZF,EAAA9C,EAAA+C,cAACU,EAAA,EAAD,CAAQd,GAAG,eAAehB,OAAQ,CAACgC,SAASvE,EAAOE,MAAMwD,EAAA9C,EAAA+C,cAAA,SAAGD,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,OAAO5D,EAAOE,UAI7F,OACEwD,EAAA9C,EAAA+C,cAAA,WACED,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,eACbF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,cACbF,EAAA9C,EAAA+C,cAAA,MAAIC,UAAU,4BACXQ,IAILV,EAAA9C,EAAA+C,cAACU,EAAA,EAAD,CAAQ/B,KAAK,cAAcsB,UAAU,iBAGvCF,EAAA9C,EAAA+C,cAACU,EAAA,EAAD,CAAQ/B,KAAK,wB,GA9BI4B,aCLnBM,EAAc,eAAClD,EAADrD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAP,MAAe,CAAEwG,OAAQnD,EAAIzD,MAAM,MAAMC,IAAI,SAAA4G,GAAC,YAAAlG,OAAUkG,EAAV,UAAmB3G,KAAK,QACpF4G,EAAgB,SAACC,EAAQ7C,GAAT,OAAqB6C,EAAS7C,EAAQyB,SACtDqB,EAAkB,SAACD,EAAQtD,GAAT,MAAkB,CAAEe,KAAMf,EAAIiC,GAAIA,GAAIjC,EAAIe,KAAMmB,QAASmB,EAAcC,EAAQtD,GAAMgC,KAAMwB,EAAaxD,KAC1HwD,EAAe,SAAA/C,GAAO,mFAAAvD,OAMpBuD,EAAQM,KANY,YAAA7D,OAOpBuD,EAAQc,KAPY,eAAArE,OAQjBuD,EAAQyB,QARS,QAAAhF,OAU1BuD,EAAQuB,OAuGKyB,E,YArFb,SAAAA,EAAatD,GAAQ,IAADlG,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAuJ,IAClBxJ,EAAAE,OAAAkE,EAAA,EAAAlE,CAAAD,KAAAC,OAAAmE,EAAA,EAAAnE,CAAAsJ,GAAAlF,KAAArE,KAAMiG,KAgBRuD,MAAQ,WAAO,IACRjD,EAAWxG,EAAKkG,MAAhBM,QACDkD,EAAWJ,EAAgB,OAAQ9C,GACvCxG,EAAKkH,aAAaC,GAAG,qBAAsB,CAAEX,QAASkD,KApBpC1J,EA0BpB2J,QAAU,WAAO,IACVnD,EAAWxG,EAAKkG,MAAhBM,QACDoD,EAASN,EAAgB,QAAS9C,UAC/BoD,EAAO5B,GACdhI,EAAKkH,aAAaC,GAAG,qBAAsB,CAAEX,QAASoD,KA9BpC5J,EAoCpB6J,UAAY,WAAO,IACZrD,EAAWxG,EAAKkG,MAAhBM,QACLxG,EAAKkH,aAAaC,GAAG,qBAAsB,CAAEX,QAASA,KAtCpCxG,EAiDpBkD,OAAS,WAAO,IACTsD,EAAWxG,EAAKkG,MAAhBM,QACDsD,EAAgB9J,EAAKkG,MAAM6D,kBAAkBvD,EAAQ7B,KACrDqF,EAAYF,EAAgB,iCAAmC,yBAC/D9C,EAAS,CAAEpB,UAAWkE,GAE1BrD,IAAcC,QAAQ,eAAW9D,GAC9BzB,KAAK,kBAAM4D,IAAgB7B,OAAOsD,KAClCrF,KAAK,kBAAMnB,EAAKkH,aAAaC,GAAG6C,EAAWhD,EAAQ,CAAEiD,OAAQ,8BAtDhEjK,EAAKkK,QAAUhE,EAAMzB,OAAOyF,QAAQxI,OAAO,SAACmC,EAAKsG,GAAiC,OAApBtG,EAAIsG,IAAU,EAAatG,GAAQ,IACjG7D,EAAKkH,aAAelH,EAAKkG,MAAMU,WAAWK,OAAOC,aAJ/BlH,E,uFASOkG,GACzB,IAAIM,EAAUN,EAAMM,QACpBA,EAAQgB,MAAO,EACfzC,IAAgB3C,IAAIoE,K,+BA+CX,IAAD4D,EACqCnK,KAAKiG,MAApCM,GADN4D,EACF3F,OADE2F,EACM5D,SADN4D,EACeL,kBACvB,OACE5B,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,WACbF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,UACbF,EAAA9C,EAAA+C,cAAA,WACED,EAAA9C,EAAA+C,cAAA,UAAK5B,EAAQyB,SACbE,EAAA9C,EAAA+C,cAAA,UAAK5B,EAAQM,KAAb,IAAmBqB,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,2BAAhC,IAA6D7B,EAAQwB,KAEvEG,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,SAEbF,EAAA9C,EAAA+C,cAAA,WACGnI,KAAKiK,QAAQG,KAAOlC,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAK4J,WAAW1B,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,iBAA1E,IAA4FF,EAAA9C,EAAA+C,cAAA,2BAAmC,KACnJnI,KAAKiK,QAAQT,MAAQtB,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAKwJ,OAAOtB,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,gBAAtE,IAAuFF,EAAA9C,EAAA+C,cAAA,sBAA8B,KAC1InI,KAAKiK,QAAQP,QAAUxB,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAK0J,SAASxB,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,kBAAxE,IAA2FF,EAAA9C,EAAA+C,cAAA,wBAAgC,KAClJnI,KAAKiK,QAAQI,OAASnC,EAAA9C,EAAA+C,cAAA,UAAQC,UAAU,kBAAkBK,QAASzI,KAAKiD,QAAQiF,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,gBAAvE,IAAwFF,EAAA9C,EAAA+C,cAAA,uBAA+B,QAKpJD,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,OAAOkC,wBAAyBtB,EAAYzC,EAAQuB,a,GAxFrDY,aCGP6B,E,2MAnBbC,YAAc,SAAChH,GAAO,IAAD2G,EACapK,EAAKkG,MAAhCwE,EADcN,EACdM,IAAK5E,EADSsE,EACTtE,MAIV6E,EALmBP,EACHO,cACF7E,IAAI,IAAA7C,OAASyH,GAAb,IAAAzH,OACNyH,GADM,IAAAzH,OAENyH,K,wEAGC,IAADE,EACiB3K,KAAKiG,MAAzBwE,EADGE,EACHF,IAAKG,EADFD,EACEC,MAAO/E,EADT8E,EACS9E,KAAoBgF,EAAY,GAC7ChF,GAAI,IAAA7C,OAAQyH,GAAOI,EAAY,cAC1BhF,GAAI,IAAA7C,OAAQyH,KAAOI,EAAY,gBACxC,IAAIC,EAAU5C,EAAA9C,EAAA+C,cAAA,KAAG4C,MAAO,CAACC,YAAY,UAAW5C,UAAW,MAAMyC,IAEjE,OACE3C,EAAA9C,EAAA+C,cAAA,QAAMM,QAASzI,KAAKwK,aAAcI,EAAlC,IAA0CE,O,GArBrBpC,aCYrBuC,EAAe,CACnB,CAAEL,MAAO,GAAI9D,KAAM,QACnB,CAAE8D,MAAO,SAAU9D,KAAM,QACzB,CAAE8D,MAAO,YAAa9D,KAAM,MAC5B,CAAE8D,MAAO,UAAW9D,KAAM,WAC1B,CAAE8D,MAAO,OAAQ9D,KAAM,SAmDVoE,E,YA3Cb,SAAAA,EAAajF,GAAQ,IAADlG,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAkL,IAClBnL,EAAAE,OAAAkE,EAAA,EAAAlE,CAAAD,KAAAC,OAAAmE,EAAA,EAAAnE,CAAAiL,GAAA7G,KAAArE,KAAMiG,KAIRkF,WAAa,SAACrE,GAAD,OAAgD,IAAtC/G,EAAKkG,MAAMmF,QAAQxJ,QAAQkF,IAL9B/G,EAMpBsL,WAAa,SAACxF,GAAD,OAAU9F,EAAK2H,SAAS,CAAC7B,UANlB9F,EAOpBuL,iBAAmB,SAAC/E,EAASkE,GAC3B,MAAY,SAARA,EAAuB,IAAInD,KAAKf,EAAQkE,IAAMc,cAAcC,MAAM,EAAE,IAC5D,SAARf,EAAwBlE,EAAQkE,GAAkE,GAA3DvC,EAAA9C,EAAA+C,cAAA,KAAGC,UAAU,eAAe2C,MAAO,CAACU,SAAU,SAClFlF,EAAQkE,IARf1K,EAAKuG,MAAQ,CAAET,KAAM7E,IAAU6E,MAFb9F,E,sEAaT,IAAD2L,EAAA1L,KACH6F,EAAQ7F,KAAKsG,MAAbT,KACFH,EAAY1F,KAAKiG,MAAjBP,SAECiG,EAAiBV,EAAa3J,OAAO,SAAAsK,GAAM,OAAIF,EAAKP,WAAWS,EAAO9E,QACtE+E,EAAYF,EAAerJ,IAAI,SAAAsJ,GAAM,OACvC1D,EAAA9C,EAAA+C,cAAA,MAAIxG,IAAKiK,EAAO9E,MAAMoB,EAAA9C,EAAA+C,cAAC2D,EAAD,CAAclB,MAAOgB,EAAOhB,MAAOH,IAAKmB,EAAO9E,KAAMjB,KAAMA,EAAM6E,aAAcgB,EAAKL,gBAExGU,EAAYrG,EAASG,KAAKd,EAAQc,IAAOvD,IAAI,SAAAiE,GAAO,OACtD2B,EAAA9C,EAAA+C,cAACU,EAAA,EAAD,CAAclH,IAAK4E,EAAQ7B,IAAKoE,MAAM,UACpCZ,EAAA9C,EAAA+C,cAACU,EAAA,EAAD,CAAQd,GAAG,WAAWhB,OAAQ,CAACpB,UAAUY,EAAQ7B,MAC/CwD,EAAA9C,EAAA+C,cAAA,UAAKwD,EAAerJ,IAAI,SAAAsJ,GAAM,OAC5B1D,EAAA9C,EAAA+C,cAAA,MAAIxG,IAAKiK,EAAO9E,MAAO4E,EAAKJ,iBAAiB/E,EAASqF,EAAO9E,cAKrE,OACEoB,EAAA9C,EAAA+C,cAAA,aACED,EAAA9C,EAAA+C,cAAA,aACED,EAAA9C,EAAA+C,cAAA,UAAK0D,IAEP3D,EAAA9C,EAAA+C,cAAA,aACG4D,Q,GAzCgBrD,aCGZsD,E,iLAZF,IAAD7B,EACiBnK,KAAKiG,MAAzBzB,EADG2F,EACH3F,OAAQkB,EADLyE,EACKzE,SACb,OACEwC,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,eACbF,EAAA9C,EAAA+C,cAAA,OAAKC,UAAU,YACbF,EAAA9C,EAAA+C,cAAC8D,EAAD,CAAcb,QAAS5G,EAAO4G,QAAS1F,SAAUA,U,GAbjCgD,aCR1BwD,EAAAC,EAAAC,EAAA,2BAAAC,IAaA,IAkGaA,EAAS,CAlGD,CACnBvF,KAAM,qBACNwF,IAAK,WAGLvF,OAAQ,CACNR,QAAS,IAEXgG,MAAO,CAELC,qBAAsBxG,IAgCL,CACnBc,KAAM,iCACNwF,IAAK,cACL5L,QAAS,CAEP,CACE+L,MAAO,UACPC,KAAM,CAAC,gBACPC,UAAW,SAACC,GAAD,OAAkB9H,IAAgBhD,IAAI8K,EAAa7F,SAASpB,aAGzE,CACE8G,MAAO,oBACPC,KAAM,CAAC,YACPC,UAAW,SAACjH,GAAD,OAAcmH,EAAcC,kBAAkBjL,KAAKgL,EAAenH,MAGjF6G,MAAO,CAILQ,qBAAsBxD,IAQD,CACvBzC,KAAM,yBACNwF,IAAK,aAGLvF,OAAQ,CAACgC,SAAU,SACnBrI,QAAS,CAEP,CACE+L,MAAO,SACPC,KAAM,CAAC,gBACPC,UAAW,SAACC,GAAD,OAAkB/H,IAAe/C,IAAI8K,EAAa7F,SAASgC,YAIxE,CACE0D,MAAO,WACPC,KAAM,CAAC,UACPC,UAAW,SAACnI,GAAD,OAAYM,IAAgBkI,SAASxI,MAGpD+H,MAAO,CAELU,YAAejB,IA1EK,CACtBkB,OAAQ,MACRpG,KAAM,aACNwF,IAAK,cACL5L,QAAS,CAEP,CACE+L,MAAO,UACPE,UAAW,kBAAM9H,IAAelE,SAIpCwM,WAAY,yBACZC,UAAWzE,EAEXvI,KAAM,CAAEiN,cAAc","file":"static/js/5.cdf896aa.chunk.js","sourcesContent":["/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","import AppConfig from '../global/appConfig';\n\nexport function orderBy (predicate) {\n  let descending = 1;\n  if (predicate.charAt(0) === '+' || predicate.charAt(0) === '-') {\n    descending = predicate.charAt(0) === '-' ? -1 : 1;\n    predicate = predicate.substring(1);\n  }\n  return (a, b) => {\n    let result = 0;\n    let valA = a[predicate], valB = b[predicate];\n    if (valA < valB) result = -1;\n    if (valA > valB) result = 1;\n    return result * descending;\n  }\n}\n\nclass MessageListUI {\n  proximalMessageId (messages, messageId) {\n    let sorted = messages.sort(orderBy(AppConfig.sort));\n    let idx = sorted.findIndex(msg => msg._id === messageId);\n    var proximalIdx = sorted.length > idx + 1 ? idx + 1 : idx - 1;\n    return proximalIdx >= 0 ? sorted[proximalIdx]._id : undefined;\n  }\n}\n\nlet instance = new MessageListUI();\nexport default instance;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {isEqual} from 'lodash';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport AppConfig from '../global/appConfig';\nimport DialogService from '../global/dialogService';\n/**\n* This component composes a message\n*\n* The message might be new, a saved draft, or a reply/forward.\n* A Cancel button discards the new message and returns to the previous state.\n* A Save As Draft button saves the message to the \"drafts\" folder.\n* A Send button sends the message\n*/\nclass Compose extends Component {\n  static propTypes = {\n    $stateParams: PropTypes.shape({\n      message: PropTypes.object\n    }),\n  }\n  /**\n  * Create our message's model using the current user's email address as 'message.from'\n  * Then extend it with all the properties from (non-url) state parameter 'message'.\n  * Keep two copies: the editable one and the original one.\n  * These copies are used to check if the message is dirty.\n  */\n  constructor(props) {\n    super(props);\n    this.pristineMessage = { body: '', to: '', subject: '', from: AppConfig.emailAddress, ...this.props.$stateParams.message };\n    this.state = {\n      message: { ...this.pristineMessage }\n    }\n  }\n  /**\n  * Checks if the edited copy and the pristine copy are identical when the state is changing.\n  * If they are not identical, the allows the user to confirm navigating away without saving.\n  */\n  uiCanExit = () => {\n    if (this.canExit || isEqual(this.pristineMessage, this.state.message)) return true;\n\n    var message = 'You have not saved this message.';\n    var question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question, \"Yes\", \"No\");\n  }\n  /**\n  * Navigates back to the previous state.\n  *\n  * - Checks the transition which activated this controller for a 'from state' that isn't the implicit root state.\n  * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n  */\n  gotoPreviousState = () => {\n    let transition = this.props.transition;\n    let hasPrevious = !!transition.from().name;\n    let state = hasPrevious ? transition.from() : \"mymessages.messagelist\";\n    let params = hasPrevious ? transition.params(\"from\") : {};\n    transition.router.stateService.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'sent' })\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'drafts'})\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  }\n\n  handleChangeMessage = (detail) => (e) => this.setState({ message: { ...this.state.message, [detail]: e.target.value } });\n\n  render () {\n    let message = this.state.message;\n    return (\n      <div className=\"compose\">\n        <div className=\"header\">\n          <div className=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" value={message.to} onChange={this.handleChangeMessage('to')} /> </div>\n          <div className=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" value={message.subject} onChange={this.handleChangeMessage('subject')} /> </div>\n        </div>\n\n        <div className=\"body\">\n          <textarea name=\"body\" id=\"body\" value={message.body} cols=\"30\" rows=\"20\" onChange={this.handleChangeMessage('body')} />\n\n          <div className=\"buttons\">\n            {/* Clicking this button brings the user back to the state they came from (previous state) */}\n            <button className=\"btn btn-primary\" onClick={this.gotoPreviousState}><i className=\"fa fa-times-circle-o\" /><span>Cancel</span></button>\n            <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save as Draft</span></button>\n            <button className=\"btn btn-primary\" onClick={this.send}><i className=\"fa fa-paper-plane-o\" /><span>Send</span></button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Compose;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView, UISref, UISrefActive} from '@uirouter/react';\n\n/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\nclass MyMessages extends Component {\n  static propTypes = {\n    folders: PropTypes.arrayOf(PropTypes.object)\n  }\n\n  render () {\n    let folders = this.props.folders.map(folder => (\n      // Highlight the selected folder:\n      // When the current state matches the UISref's state (and its parameters)\n      // UISrefActive applies the 'selected' class to the li element\n      <UISrefActive key={folder._id} class=\"selected\">\n        <li className=\"folder\">\n          {/* This UISref is a relative link to the 'mymessages.messagelist' substate. It provides the\n            'folderId' parameter value from the current folder's ._id property */}\n          <UISref to=\".messagelist\" params={{folderId:folder._id}}><a><i className=\"fa\"/>{folder._id}</a></UISref>\n        </li>\n      </UISrefActive>\n    ));\n    return (\n      <div>\n        <div className=\"my-messages\">\n          <div className=\"folderlist\">\n            <ul className=\"selectlist list-unstyled\">\n              {folders}\n            </ul>\n          </div>\n          {/* A named view for the list of messages in this folder. This will be filled in by the 'mymessages.messagelist' child state */}\n          <UIView name=\"messagelist\" className=\"messagelist\" />\n        </div>\n        {/*  A named UIView for a message's contents. The 'mymessages.messagelist.message' grandchild state plugs into this UIView */}\n        <UIView name=\"messagecontent\" />\n      </div>\n    );\n  }\n}\n\nexport default MyMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n\nconst messageBody = (msg = '') => ({ __html: msg.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n') });\nconst prefixSubject = (prefix, message) => prefix + message.subject;\nconst makeResponseMsg = (prefix, msg) => ({ from: msg.to, to: msg.from, subject: prefixSubject(prefix, msg), body: quoteMessage(msg)});\nconst quoteMessage = message => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/**\n* This component renders a single message\n*\n* Buttons perform actions related to the message.\n* Buttons are shown/hidden based on the folder's context.\n* For instance, a \"draft\" message can be edited, but can't be replied to.\n*/\nclass Message extends Component {\n  static propTypes = {\n    message: PropTypes.object,\n    nextMessageGetter: PropTypes.func,\n    folder: PropTypes.shape({\n      actions: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  constructor (props) {\n    super(props);\n    // Apply the available actions for the message, depending on the folder the message belongs to.\n    this.actions = props.folder.actions.reduce((obj, action) => { obj[action] = true; return obj; }, {});\n    this.stateService = this.props.transition.router.stateService;\n  }\n  /**\n  * When the user views a message, mark it as read and save (PUT) the resource.\n  */\n  componentWillReceiveProps (props) {\n    let message = props.message;\n    message.read = true;\n    MessagesStorage.put(message);\n  }\n  /**\n  * Compose a new message as a reply to this one\n  */\n  reply = () => {\n    let {message} = this.props;\n    let replyMsg = makeResponseMsg(\"Re: \", message);\n    this.stateService.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n  * Compose a new message as a forward of this one.\n  */\n  forward = () => {\n    let {message} = this.props;\n    let fwdMsg = makeResponseMsg(\"Fwd: \", message);\n    delete fwdMsg.to;\n    this.stateService.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n  * Continue composing this (draft) message\n  */\n  editDraft = () => {\n    let {message} = this.props;\n    this.stateService.go('mymessages.compose', { message: message });\n  };\n\n  /**\n  * Delete this message.\n  *\n  * - confirm deletion\n  * - delete the message\n  * - determine which message should be active\n  * - show that message\n  */\n  remove = () => {\n    let {message} = this.props;\n    let nextMessageId = this.props.nextMessageGetter(message._id);\n    let nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    let params = { messageId: nextMessageId };\n\n    DialogService.confirm(\"Delete?\", undefined)\n      .then(() => MessagesStorage.remove(message))\n      .then(() => this.stateService.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n  render () {\n    let { folder, message, nextMessageGetter } = this.props;\n    return (\n      <div className=\"message\">\n        <div className=\"header\">\n          <div>\n            <h4>{message.subject}</h4>\n            <h5>{message.from} <i className=\"fa fa-long-arrow-right\" /> {message.to}</h5>\n          </div>\n          <div className=\"line2\">\n            {/*<div>{{$ctrl.message.date | date: 'longDate'}} {{$ctrl.message.date | date: 'mediumTime'}}</div>*/}\n            <div>\n              {this.actions.edit ? <button className=\"btn btn-primary\" onClick={this.editDraft}><i className=\"fa fa-pencil\" /> <span>Edit Draft</span></button> : null}\n              {this.actions.reply ? <button className=\"btn btn-primary\" onClick={this.reply}><i className=\"fa fa-reply\" /> <span>Reply</span></button> : null}\n              {this.actions.forward ? <button className=\"btn btn-primary\" onClick={this.forward}><i className=\"fa fa-forward\" /> <span>Forward</span></button> : null}\n              {this.actions.delete ? <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /> <span>Delete</span></button> : null}\n            </div>\n          </div>\n        </div>\n        {/* Pass the raw (plain text) message body through the messageBody function to format slightly nicer */}\n        <div className=\"body\" dangerouslySetInnerHTML={messageBody(message.body)}></div>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n/**\n * A directive (for a table header) which changes the app's sort order\n */\nclass SortMessages extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    col: PropTypes.string,\n    sort: PropTypes.string,\n    onChangeSort: PropTypes.func\n  }\n  handleClick = (e) => {\n    let {col, sort, onChangeSort} = this.props;\n    let newSort = sort === `+${col}`\n      ? `-${col}`\n      : `+${col}`;\n    onChangeSort(newSort);\n  }\n  render () {\n    let {col, label, sort} = this.props, sortClass = '';\n    if (sort == `+${col}`) sortClass = 'fa-sort-asc';\n    else if (sort == `-${col}`) sortClass = 'fa-sort-desc';\n    let chevron = <i style={{paddingLeft:'0.25em'}} className={'fa '+sortClass} />\n\n    return (\n      <span onClick={this.handleClick}>{label} {chevron}</span>\n    );\n  }\n}\n\nexport default SortMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n\nimport {orderBy} from '../messageListUIService';\n\nimport AppConfig from '../../global/appConfig';\nimport SortMessages from './SortMessages';\n/**\n* A component that displays a folder of messages as a table\n*\n* If a row is clicked, the details of the message is shown using a relative UISref to `.message`.\n*\n* UISrefActive is used to highlight the selected row.\n*\n* Shows/hides specific columns based on the `columns` resolved prop.\n*/\nconst tableColumns = [\n  { label: '', name: 'read' },\n  { label: 'Sender', name: 'from' },\n  { label: 'Recipient', name: 'to' },\n  { label: 'Subject', name: 'subject' },\n  { label: 'Date', name: 'date' },\n];\n\nclass MessageTable extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    columns: PropTypes.arrayOf(PropTypes.string)\n  }\n  constructor (props) {\n    super(props);\n    this.state = { sort: AppConfig.sort }\n  }\n\n  colVisible = (name) => this.props.columns.indexOf(name) !== -1;\n  changeSort = (sort) => this.setState({sort});\n  formattedContent = (message, col) => {\n    if (col === 'date') return new Date(message[col]).toISOString().slice(0,10);\n    if (col === 'read') return !message[col] ? <i className=\"fa fa-circle\" style={{fontSize: '50%'}} /> : '';\n    return message[col];\n  }\n\n  render () {\n    let {sort} = this.state,\n      {messages} = this.props;\n\n    let visibleColumns = tableColumns.filter(column => this.colVisible(column.name));\n    let tableHead = visibleColumns.map(column =>\n      <td key={column.name}><SortMessages label={column.label} col={column.name} sort={sort} onChangeSort={this.changeSort} /></td>\n    );\n    let tableBody = messages.sort(orderBy(sort)).map(message =>\n      <UISrefActive key={message._id} class=\"active\">\n        <UISref to=\".message\" params={{messageId:message._id}}>\n          <tr>{visibleColumns.map(column =>\n            <td key={column.name}>{this.formattedContent(message, column.name)}</td>\n          )}</tr>\n        </UISref>\n      </UISrefActive>\n    );\n    return (\n      <table>\n        <thead>\n          <tr>{tableHead}</tr>\n        </thead>\n        <tbody>\n          {tableBody}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default MessageTable;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport MessageTable from './components/MessageTable';\n\n/**\n * This component renders a list of messages using the `MessageTable` component\n */\nclass MessageList extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    folder: PropTypes.shape({\n      columns: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  render () {\n    let {folder, messages} = this.props;\n    return (\n      <div className=\"messagelist\">\n        <div className=\"messages\">\n          <MessageTable columns={folder.columns} messages={messages} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import {FoldersStorage, MessagesStorage} from '../global/dataSources';\nimport MessageListUI from './messageListUIService';\n\nimport Compose from './Compose';\nimport MyMessages from './MyMessages';\nimport Message from './Message';\nimport MessageList from './MessageList';\n/**\n* This state allows the user to compose a new message, edit a drafted message, send a message,\n* or save an unsent message as a draft.\n*\n* This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n*/\nconst composeState = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    \"!$default.$default\": Compose\n  }\n};\n\n/**\n* The mymessages state. This is the main state for the mymessages page.\n*\n* This state shows the list of folders for the current user. It retrieves the folders from the\n* Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n*/\nconst mymessagesState = {\n  parent: 'app',\n  name: \"mymessages\",\n  url: \"/mymessages\",\n  resolve: [\n    // All the folders are fetched from the Folders service\n    {\n      token: 'folders',\n      resolveFn: () => FoldersStorage.all(),\n    },\n  ],\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  component: MyMessages,\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n/**\n* This state shows the contents of a single message.\n* It also has UI to reply, forward, delete, or edit an existing draft.\n*/\nconst messageState = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  resolve: [\n    // Fetch the message from the Messages service using the messageId parameter\n    {\n      token: 'message',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => MessagesStorage.get($transition$.params().messageId),\n    },\n    // Provide the component with a function it can query that returns the closest message id\n    {\n      token: 'nextMessageGetter',\n      deps: ['messages'],\n      resolveFn: (messages) => MessageListUI.proximalMessageId.bind(MessageListUI, messages),\n    },\n  ],\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    \"^.^.messagecontent\": Message\n  }\n};\n\n\n/**\n* This state shows the contents (a message list) of a single folder\n*/\nconst messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL. This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: {folderId: \"inbox\"},\n  resolve: [\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    {\n      token: 'folder',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => FoldersStorage.get($transition$.params().folderId),\n    },\n    // The resolved folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    {\n      token: 'messages',\n      deps: ['folder'],\n      resolveFn: (folder) => MessagesStorage.byFolder(folder),\n    }\n  ],\n  views: {\n    // This targets the \"messagelist\" named UIView added to the DOM in the parent state 'mymessages'\n    \"messagelist\": MessageList\n  }\n};\n\nexport const states = [composeState, messageState, messageListState, mymessagesState];\n"],"sourceRoot":""}