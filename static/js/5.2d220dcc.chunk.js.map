{"version":3,"sources":["util/util.js","util/sessionStorage.js","global/dataSources.js","mymessages/messageListUIService.js","mymessages/Compose.js","mymessages/MyMessages.js","mymessages/Message.js","mymessages/components/SortMessages.js","mymessages/components/MessageTable.js","mymessages/MessageList.js","mymessages/states.js"],"names":["pushToArr","array","item","push","guidChar","c","Math","floor","random","toString","toUpperCase","SessionStorage","sessionStorageKey","sourceUrl","_commit","data","sessionStorage","setItem","JSON","stringify","Promise","resolve","all","thenFn","reject","setTimeout","_data","AppConfig","restDelay","then","search","exampleItem","matchesExample","example","Object","keys","reduce","memo","key","indexOf","items","filter","bind","get","id","find","_idProp","save","put","post","split","map","join","eqFn","_eqFn","idx","findIndex","Error","remove","splice","fromSession","getItem","this","undefined","l","r","parse","e","console","log","stripHashKey","obj","val","setProp","fetch","resp","json","Contacts","Folders","Messages","folder","searchObject","_id","emailAddress","ContactsStorage","FoldersStorage","MessagesStorage","orderBy","predicate","descending","charAt","substring","a","b","result","valA","valB","instance","messages","messageId","sorted","sort","msg","proximalIdx","length","Compose","props","uiCanExit","canExit","isEqual","pristineMessage","state","message","DialogService","confirm","gotoPreviousState","transition","hasPrevious","from","name","params","router","stateService","go","send","date","Date","read","handleChangeMessage","detail","setState","target","value","body","to","subject","$stateParams","className","type","onChange","cols","rows","onClick","Component","MyMessages","folders","class","folderId","messageBody","__html","p","prefixSubject","prefix","makeResponseMsg","quoteMessage","Message","reply","replyMsg","forward","fwdMsg","editDraft","nextMessageId","nextMessageGetter","nextState","reload","actions","action","edit","delete","dangerouslySetInnerHTML","SortMessages","handleClick","col","onChangeSort","label","sortClass","chevron","style","paddingLeft","tableColumns","MessageTable","colVisible","columns","changeSort","formattedContent","toISOString","slice","fontSize","visibleColumns","column","tableHead","tableBody","MessageList","states","url","views","token","deps","resolveFn","$transition$","MessageListUI","proximalMessageId","byFolder","parent","redirectTo","component","requiresAuth"],"mappings":"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","file":"static/js/5.2d220dcc.chunk.js","sourcesContent":["/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","import AppConfig from '../global/appConfig';\n\nexport function orderBy (predicate) {\n  let descending = 1;\n  if (predicate.charAt(0) === '+' || predicate.charAt(0) === '-') {\n    descending = predicate.charAt(0) === '-' ? -1 : 1;\n    predicate = predicate.substring(1);\n  }\n  return (a, b) => {\n    let result = 0;\n    let valA = a[predicate], valB = b[predicate];\n    if (valA < valB) result = -1;\n    if (valA > valB) result = 1;\n    return result * descending;\n  }\n}\n\nclass MessageListUI {\n  proximalMessageId (messages, messageId) {\n    let sorted = messages.sort(orderBy(AppConfig.sort));\n    let idx = sorted.findIndex(msg => msg._id === messageId);\n    var proximalIdx = sorted.length > idx + 1 ? idx + 1 : idx - 1;\n    return proximalIdx >= 0 ? sorted[proximalIdx]._id : undefined;\n  }\n}\n\nlet instance = new MessageListUI();\nexport default instance;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {isEqual} from 'lodash';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport AppConfig from '../global/appConfig';\nimport DialogService from '../global/dialogService';\n/**\n* This component composes a message\n*\n* The message might be new, a saved draft, or a reply/forward.\n* A Cancel button discards the new message and returns to the previous state.\n* A Save As Draft button saves the message to the \"drafts\" folder.\n* A Send button sends the message\n*/\nclass Compose extends Component {\n  static propTypes = {\n    $stateParams: PropTypes.shape({\n      message: PropTypes.object\n    }),\n  }\n  /**\n  * Create our message's model using the current user's email address as 'message.from'\n  * Then extend it with all the properties from (non-url) state parameter 'message'.\n  * Keep two copies: the editable one and the original one.\n  * These copies are used to check if the message is dirty.\n  */\n  constructor(props) {\n    super(props);\n    this.pristineMessage = { body: '', to: '', subject: '', from: AppConfig.emailAddress, ...this.props.$stateParams.message };\n    this.state = {\n      message: { ...this.pristineMessage }\n    }\n  }\n  /**\n  * Checks if the edited copy and the pristine copy are identical when the state is changing.\n  * If they are not identical, the allows the user to confirm navigating away without saving.\n  */\n  uiCanExit = () => {\n    if (this.canExit || isEqual(this.pristineMessage, this.state.message)) return true;\n\n    var message = 'You have not saved this message.';\n    var question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question, \"Yes\", \"No\");\n  }\n  /**\n  * Navigates back to the previous state.\n  *\n  * - Checks the transition which activated this controller for a 'from state' that isn't the implicit root state.\n  * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n  */\n  gotoPreviousState = () => {\n    let transition = this.props.transition;\n    let hasPrevious = !!transition.from().name;\n    let state = hasPrevious ? transition.from() : \"mymessages.messagelist\";\n    let params = hasPrevious ? transition.params(\"from\") : {};\n    transition.router.stateService.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'sent' })\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'drafts'})\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  }\n\n  handleChangeMessage = (detail) => (e) => this.setState({ message: { ...this.state.message, [detail]: e.target.value } });\n\n  render () {\n    let message = this.state.message;\n    return (\n      <div className=\"compose\">\n        <div className=\"header\">\n          <div className=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" value={message.to} onChange={this.handleChangeMessage('to')} /> </div>\n          <div className=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" value={message.subject} onChange={this.handleChangeMessage('subject')} /> </div>\n        </div>\n\n        <div className=\"body\">\n          <textarea name=\"body\" id=\"body\" value={message.body} cols=\"30\" rows=\"20\" onChange={this.handleChangeMessage('body')} />\n\n          <div className=\"buttons\">\n            {/* Clicking this button brings the user back to the state they came from (previous state) */}\n            <button className=\"btn btn-primary\" onClick={this.gotoPreviousState}><i className=\"fa fa-times-circle-o\" /><span>Cancel</span></button>\n            <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save as Draft</span></button>\n            <button className=\"btn btn-primary\" onClick={this.send}><i className=\"fa fa-paper-plane-o\" /><span>Send</span></button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Compose;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView, UISref, UISrefActive} from '@uirouter/react';\n\n/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\nclass MyMessages extends Component {\n  static propTypes = {\n    folders: PropTypes.arrayOf(PropTypes.object)\n  }\n\n  render () {\n    let folders = this.props.folders.map(folder => (\n      // Highlight the selected folder:\n      // When the current state matches the UISref's state (and its parameters)\n      // UISrefActive applies the 'selected' class to the li element\n      <UISrefActive key={folder._id} class=\"selected\">\n        <li className=\"folder\">\n          {/* This UISref is a relative link to the 'mymessages.messagelist' substate. It provides the\n            'folderId' parameter value from the current folder's ._id property */}\n          <UISref to=\".messagelist\" params={{folderId:folder._id}}><a><i className=\"fa\"/>{folder._id}</a></UISref>\n        </li>\n      </UISrefActive>\n    ));\n    return (\n      <div>\n        <div className=\"my-messages\">\n          <div className=\"folderlist\">\n            <ul className=\"selectlist list-unstyled\">\n              {folders}\n            </ul>\n          </div>\n          {/* A named view for the list of messages in this folder. This will be filled in by the 'mymessages.messagelist' child state */}\n          <UIView name=\"messagelist\" className=\"messagelist\" />\n        </div>\n        {/*  A named UIView for a message's contents. The 'mymessages.messagelist.message' grandchild state plugs into this UIView */}\n        <UIView name=\"messagecontent\" />\n      </div>\n    );\n  }\n}\n\nexport default MyMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n\nconst messageBody = (msg = '') => ({ __html: msg.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n') });\nconst prefixSubject = (prefix, message) => prefix + message.subject;\nconst makeResponseMsg = (prefix, msg) => ({ from: msg.to, to: msg.from, subject: prefixSubject(prefix, msg), body: quoteMessage(msg)});\nconst quoteMessage = message => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/**\n* This component renders a single message\n*\n* Buttons perform actions related to the message.\n* Buttons are shown/hidden based on the folder's context.\n* For instance, a \"draft\" message can be edited, but can't be replied to.\n*/\nclass Message extends Component {\n  static propTypes = {\n    message: PropTypes.object,\n    nextMessageGetter: PropTypes.func,\n    folder: PropTypes.shape({\n      actions: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  constructor (props) {\n    super(props);\n    // Apply the available actions for the message, depending on the folder the message belongs to.\n    this.actions = props.folder.actions.reduce((obj, action) => { obj[action] = true; return obj; }, {});\n    this.stateService = this.props.transition.router.stateService;\n  }\n  /**\n  * When the user views a message, mark it as read and save (PUT) the resource.\n  */\n  componentWillReceiveProps (props) {\n    let message = props.message;\n    message.read = true;\n    MessagesStorage.put(message);\n  }\n  /**\n  * Compose a new message as a reply to this one\n  */\n  reply = () => {\n    let {message} = this.props;\n    let replyMsg = makeResponseMsg(\"Re: \", message);\n    this.stateService.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n  * Compose a new message as a forward of this one.\n  */\n  forward = () => {\n    let {message} = this.props;\n    let fwdMsg = makeResponseMsg(\"Fwd: \", message);\n    delete fwdMsg.to;\n    this.stateService.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n  * Continue composing this (draft) message\n  */\n  editDraft = () => {\n    let {message} = this.props;\n    this.stateService.go('mymessages.compose', { message: message });\n  };\n\n  /**\n  * Delete this message.\n  *\n  * - confirm deletion\n  * - delete the message\n  * - determine which message should be active\n  * - show that message\n  */\n  remove = () => {\n    let {message} = this.props;\n    let nextMessageId = this.props.nextMessageGetter(message._id);\n    let nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    let params = { messageId: nextMessageId };\n\n    DialogService.confirm(\"Delete?\", undefined)\n      .then(() => MessagesStorage.remove(message))\n      .then(() => this.stateService.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n  render () {\n    let { folder, message, nextMessageGetter } = this.props;\n    return (\n      <div className=\"message\">\n        <div className=\"header\">\n          <div>\n            <h4>{message.subject}</h4>\n            <h5>{message.from} <i className=\"fa fa-long-arrow-right\" /> {message.to}</h5>\n          </div>\n          <div className=\"line2\">\n            {/*<div>{{$ctrl.message.date | date: 'longDate'}} {{$ctrl.message.date | date: 'mediumTime'}}</div>*/}\n            <div>\n              {this.actions.edit ? <button className=\"btn btn-primary\" onClick={this.editDraft}><i className=\"fa fa-pencil\" /> <span>Edit Draft</span></button> : null}\n              {this.actions.reply ? <button className=\"btn btn-primary\" onClick={this.reply}><i className=\"fa fa-reply\" /> <span>Reply</span></button> : null}\n              {this.actions.forward ? <button className=\"btn btn-primary\" onClick={this.forward}><i className=\"fa fa-forward\" /> <span>Forward</span></button> : null}\n              {this.actions.delete ? <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /> <span>Delete</span></button> : null}\n            </div>\n          </div>\n        </div>\n        {/* Pass the raw (plain text) message body through the messageBody function to format slightly nicer */}\n        <div className=\"body\" dangerouslySetInnerHTML={messageBody(message.body)}></div>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n/**\n * A directive (for a table header) which changes the app's sort order\n */\nclass SortMessages extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    col: PropTypes.string,\n    sort: PropTypes.string,\n    onChangeSort: PropTypes.func\n  }\n  handleClick = (e) => {\n    let {col, sort, onChangeSort} = this.props;\n    let newSort = sort === `+${col}`\n      ? `-${col}`\n      : `+${col}`;\n    onChangeSort(newSort);\n  }\n  render () {\n    let {col, label, sort} = this.props, sortClass = '';\n    if (sort == `+${col}`) sortClass = 'fa-sort-asc';\n    else if (sort == `-${col}`) sortClass = 'fa-sort-desc';\n    let chevron = <i style={{paddingLeft:'0.25em'}} className={'fa '+sortClass} />\n\n    return (\n      <span onClick={this.handleClick}>{label} {chevron}</span>\n    );\n  }\n}\n\nexport default SortMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n\nimport {orderBy} from '../messageListUIService';\n\nimport AppConfig from '../../global/appConfig';\nimport SortMessages from './SortMessages';\n/**\n* A component that displays a folder of messages as a table\n*\n* If a row is clicked, the details of the message is shown using a relative UISref to `.message`.\n*\n* UISrefActive is used to highlight the selected row.\n*\n* Shows/hides specific columns based on the `columns` resolved prop.\n*/\nconst tableColumns = [\n  { label: '', name: 'read' },\n  { label: 'Sender', name: 'from' },\n  { label: 'Recipient', name: 'to' },\n  { label: 'Subject', name: 'subject' },\n  { label: 'Date', name: 'date' },\n];\n\nclass MessageTable extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    columns: PropTypes.arrayOf(PropTypes.string)\n  }\n  constructor (props) {\n    super(props);\n    this.state = { sort: AppConfig.sort }\n  }\n\n  colVisible = (name) => this.props.columns.indexOf(name) !== -1;\n  changeSort = (sort) => this.setState({sort});\n  formattedContent = (message, col) => {\n    if (col === 'date') return new Date(message[col]).toISOString().slice(0,10);\n    if (col === 'read') return !message[col] ? <i className=\"fa fa-circle\" style={{fontSize: '50%'}} /> : '';\n    return message[col];\n  }\n\n  render () {\n    let {sort} = this.state,\n      {messages} = this.props;\n\n    let visibleColumns = tableColumns.filter(column => this.colVisible(column.name));\n    let tableHead = visibleColumns.map(column =>\n      <td key={column.name}><SortMessages label={column.label} col={column.name} sort={sort} onChangeSort={this.changeSort} /></td>\n    );\n    let tableBody = messages.sort(orderBy(sort)).map(message =>\n      <UISrefActive key={message._id} class=\"active\">\n        <UISref to=\".message\" params={{messageId:message._id}}>\n          <tr>{visibleColumns.map(column =>\n            <td key={column.name}>{this.formattedContent(message, column.name)}</td>\n          )}</tr>\n        </UISref>\n      </UISrefActive>\n    );\n    return (\n      <table>\n        <thead>\n          <tr>{tableHead}</tr>\n        </thead>\n        <tbody>\n          {tableBody}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default MessageTable;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport MessageTable from './components/MessageTable';\n\n/**\n * This component renders a list of messages using the `MessageTable` component\n */\nclass MessageList extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    folder: PropTypes.shape({\n      columns: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  render () {\n    let {folder, messages} = this.props;\n    return (\n      <div className=\"messagelist\">\n        <div className=\"messages\">\n          <MessageTable columns={folder.columns} messages={messages} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import {FoldersStorage, MessagesStorage} from '../global/dataSources';\nimport MessageListUI from './messageListUIService';\n\nimport Compose from './Compose';\nimport MyMessages from './MyMessages';\nimport Message from './Message';\nimport MessageList from './MessageList';\n/**\n* This state allows the user to compose a new message, edit a drafted message, send a message,\n* or save an unsent message as a draft.\n*\n* This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n*/\nconst composeState = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    \"!$default.$default\": Compose\n  }\n};\n\n/**\n* The mymessages state. This is the main state for the mymessages page.\n*\n* This state shows the list of folders for the current user. It retrieves the folders from the\n* Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n*/\nconst mymessagesState = {\n  parent: 'app',\n  name: \"mymessages\",\n  url: \"/mymessages\",\n  resolve: [\n    // All the folders are fetched from the Folders service\n    {\n      token: 'folders',\n      resolveFn: () => FoldersStorage.all(),\n    },\n  ],\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  component: MyMessages,\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n/**\n* This state shows the contents of a single message.\n* It also has UI to reply, forward, delete, or edit an existing draft.\n*/\nconst messageState = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  resolve: [\n    // Fetch the message from the Messages service using the messageId parameter\n    {\n      token: 'message',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => MessagesStorage.get($transition$.params().messageId),\n    },\n    // Provide the component with a function it can query that returns the closest message id\n    {\n      token: 'nextMessageGetter',\n      deps: ['messages'],\n      resolveFn: (messages) => MessageListUI.proximalMessageId.bind(MessageListUI, messages),\n    },\n  ],\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    \"^.^.messagecontent\": Message\n  }\n};\n\n\n/**\n* This state shows the contents (a message list) of a single folder\n*/\nconst messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL. This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: {folderId: \"inbox\"},\n  resolve: [\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    {\n      token: 'folder',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => FoldersStorage.get($transition$.params().folderId),\n    },\n    // The resolved folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    {\n      token: 'messages',\n      deps: ['folder'],\n      resolveFn: (folder) => MessagesStorage.byFolder(folder),\n    }\n  ],\n  views: {\n    // This targets the \"messagelist\" named UIView added to the DOM in the parent state 'mymessages'\n    \"messagelist\": MessageList\n  }\n};\n\nexport const states = [composeState, messageState, messageListState, mymessagesState];\n"],"sourceRoot":""}